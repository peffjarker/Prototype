@using Prototype.Components.Layout.Navigation.Sidebar
@using Services
@using global::Services
@inject IFranchiseService FranchiseService

@if (Sections.Count > 0)
{
    <div class="sidebar-sections" style="--ss-width:@Width; --ss-header:#@(HeaderColor.TrimStart('#')); --ss-accent:#@(AccentColor.TrimStart('#')); --ss-bg:#@(BackgroundColor.TrimStart('#'));">
        @for (var i = 0; i < Sections.Count; i++)
        {
            var section = Sections[i];

            @if (section.IsFranchiseSelector)
            {
                var franchises = FranchiseService.GetFranchises();
                var currentDealer = SelectedBySection.TryGetValue("dealer", out var d) ? d : null;

                <FranchiseSelectorSection Franchises="@franchises"
                                          SelectedDealerId="@currentDealer"
                                          OnFranchiseChanged="@((dealerId) => HandleFranchiseChange(dealerId))" />

                @if (i < Sections.Count - 1)
                {
                    <div class="ss-separator"><div></div></div>
                }
            }
            else
            {
                <section class="ss-section">
                    <header class="ss-header"><span>@(string.IsNullOrWhiteSpace(section.Title) ? section.SectionKey : section.Title)</span></header>
                    @if (section.IsLegend)
                    {
                        <ul class="ss-legend">
                            @foreach (var item in section.Items)
                            {
                                <li class="ss-legend-item">
                                    <span class="dot" style="background:@(item.ColorHex ?? "#d0d0d0")"></span>
                                    <span class="text">@item.Text</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <ul class="ss-list">
                            @foreach (var item in section.Items)
                            {
                                var isSelected = IsSelected(section, item);
                                <li @key="(section.SectionKey ?? section.Title) + '|' + item.Text"
                                    class="ss-item @(isSelected ? "selected" : null)"
                                    @onclick="() => HandleSelect(section, item)">
                                    @if (!string.IsNullOrWhiteSpace(item.Icon))
                                    {
                                        <span class="ss-item-icon">@((MarkupString)item.Icon)</span>
                                    }
                                    <span class="ss-item-text">@item.Text</span>
                                </li>
                            }
                        </ul>
                    }
                </section>
                @if (i < Sections.Count - 1)
                {
                    <div class="ss-separator"><div></div></div>
                }
            }
        }
    </div>
}

@code {
    private async Task HandleFranchiseChange(string? dealerId)
    {
        var updates = new Dictionary<string, string?> { ["dealer"] = dealerId };
        var href = UpdateQuery(updates);
        Nav.NavigateTo(href, replace: false);

        if (OnItemSelected.HasDelegate)
        {
            var franchiseItem = new SidebarItem { Key = dealerId, Text = dealerId ?? "All" };
            await OnItemSelected.InvokeAsync(franchiseItem);
        }
    }
}