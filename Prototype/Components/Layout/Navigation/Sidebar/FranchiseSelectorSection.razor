@using Telerik.Blazor
@using Telerik.Blazor.Components
@using Services
@using global::Services
@using Microsoft.AspNetCore.WebUtilities
@implements IDisposable
@inject IUrlState Url
@inject NavigationManager Nav

<section class="ss-section franchise-selector-section">
    <div class="franchise-selector-content">
        <div class="franchise-combo-wrapper">
            <TelerikComboBox TItem="FranchiseOption"
                             TValue="string"
                             Data="@FranchisesOrEmpty"
                             TextField="@nameof(FranchiseOption.Display)"
                             ValueField="@nameof(FranchiseOption.DealerId)"
                             Value="@SelectedDealerIdBacking"
                             ValueChanged="@OnValueChanged"
                             Placeholder="Search franchise..."
                             Filterable="true"
                             FilterOperator="@StringFilterOperator.Contains"
                             AllowCustom="true"
                             Class="franchise-combo">
                <ItemTemplate Context="franchise">
                    <div class="franchise-item">
                        <span class="franchise-id">@franchise.DealerId</span>
                        <span class="franchise-dot">•</span>
                        <span class="franchise-name">@franchise.FirstName @franchise.LastName</span>
                    </div>
                </ItemTemplate>
            </TelerikComboBox>

            @if (!string.IsNullOrWhiteSpace(SelectedDealerIdBacking))
            {
                <button type="button"
                        class="franchise-clear-icon"
                        @onclick="ClearSelection"
                        title="Clear selection"
                        aria-label="Clear franchise selection">
                    ×
                </button>
            }
        </div>

        @if (!string.IsNullOrWhiteSpace(SelectedDealerIdBacking))
        {
            var selected = FranchisesOrEmpty.FirstOrDefault(f =>
            string.Equals(f.DealerId, SelectedDealerIdBacking, StringComparison.OrdinalIgnoreCase));

            if (selected is not null)
            {
                <div class="franchise-info" aria-live="polite">
                    <small>
                        <strong>@selected.DealerId</strong> — @selected.FirstName @selected.LastName
                    </small>
                </div>
            }
            else
            {
                <div class="franchise-info" aria-live="polite">
                    <small>
                        <strong>@SelectedDealerIdBacking</strong> — (custom)
                    </small>
                </div>
            }
        }
    </div>
</section>

@code {
    // ===== Parameters =====
    [Parameter] public IReadOnlyList<FranchiseOption> Franchises { get; set; } = Array.Empty<FranchiseOption>();
    [Parameter] public string? SelectedDealerId { get; set; }
    [Parameter] public EventCallback<string?> OnFranchiseChanged { get; set; }

    // ===== Internal state =====
    private string? SelectedDealerIdBacking;

    private IReadOnlyList<FranchiseOption> FranchisesOrEmpty =>
        Franchises ?? Array.Empty<FranchiseOption>();

    protected override void OnInitialized()
    {
        // SYNCHRONOUSLY read directly from browser URL - no debouncing, no delay
        var uri = new Uri(Nav.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("dealer", out var dealerValue))
        {
            SelectedDealerIdBacking = dealerValue.ToString();
        }

        // Subscribe to URL changes for future updates
        Url.Changed += HandleUrlChanged;
    }

    protected override void OnParametersSet()
    {
        // Prefer parameter if explicitly set, but don't override initial URL read
        if (!string.IsNullOrWhiteSpace(SelectedDealerId) &&
            !string.Equals(SelectedDealerIdBacking, SelectedDealerId, StringComparison.Ordinal))
        {
            SelectedDealerIdBacking = SelectedDealerId;
        }
    }

    private void HandleUrlChanged()
    {
        // Sync from URL when it changes
        var dealerFromUrl = Url.Current.TryGetValue("dealer", out var d) ? d : null;

        if (!string.Equals(SelectedDealerIdBacking, dealerFromUrl, StringComparison.Ordinal))
        {
            SelectedDealerIdBacking = dealerFromUrl;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnValueChanged(string? value)
    {
        var normalized = NormalizeValue(value);
        SelectedDealerIdBacking = normalized;
        await OnFranchiseChanged.InvokeAsync(normalized);
    }

    private async Task ClearSelection()
    {
        SelectedDealerIdBacking = null;
        await OnFranchiseChanged.InvokeAsync(null);
    }

    private static string? NormalizeValue(string? s)
        => string.IsNullOrWhiteSpace(s) ? null : s.Trim();

    public void Dispose()
    {
        Url.Changed -= HandleUrlChanged;
    }
}

<style>
    .franchise-selector-section .franchise-selector-content {
        padding: 0.75rem;
    }

    .franchise-combo-wrapper {
        position: relative;
        width: 100%;
    }

    .franchise-selector-section .franchise-combo {
        width: 100%;
    }

    .franchise-clear-icon {
        position: absolute;
        right: 32px;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: #64748b;
        font-size: 1.5rem;
        line-height: 1;
        cursor: pointer;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.15s;
        z-index: 10;
    }

        .franchise-clear-icon:hover {
            background: #f1f5f9;
            color: #475569;
        }

        .franchise-clear-icon:active {
            background: #e2e8f0;
        }

    .franchise-item {
        display: flex;
        align-items: center;
        gap: 0.4rem;
        padding: 0.25rem 0;
    }

    .franchise-id {
        font-weight: 600;
        color: #0c5ea8;
        font-size: 0.875rem;
    }

    .franchise-dot {
        color: #cbd5e1;
        font-weight: bold;
    }

    .franchise-name {
        color: #374151;
        font-size: 0.875rem;
    }

    .franchise-info {
        margin-top: 0.5rem;
        padding: 0.5rem;
        background: #f8fafc;
        border-radius: 6px;
        border: 1px solid #e2e8f0;
    }

        .franchise-info small {
            font-size: 0.75rem;
            line-height: 1.3;
            color: #6c757d;
        }

    .franchise-selector-section .k-input-inner {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
    }

    .franchise-selector-section .k-input {
        border-radius: 8px;
    }
</style>
