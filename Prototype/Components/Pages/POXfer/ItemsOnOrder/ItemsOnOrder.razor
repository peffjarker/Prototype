@page "/po-transfer/items-on-order"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Web
@using Prototype.Components.Layout
@using Prototype.Components.Layout.Models
@using Prototype.Components.Pages.POXfer.Models
@using Prototype.Components.Services
@inherits ComponentBase
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject ISidebarState Sidebar
@using Prototype.Components.Services.Reports
@inject IItemsOnOrderPdfService ReportService

<div class="ioo-wrap">
    <header class="ioo-header">
        <h3 class="ioo-title">Items On Order</h3>
    </header>

    <!-- Items table -->
    <section class="card">
        <div class="table-wrap">
            <table class="tbl tbl-items" role="grid" aria-label="Items on order">
                <thead>
                    <tr>
                        <th class="w-item">Item</th>
                        <th>Description</th>
                        <th class="num">On Order Open</th>
                        <th class="num">In Transit</th>
                        <th class="num">Alloc</th>
                        <th class="num">BKO</th>
                        <th class="num">Total Open Cost</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < FilteredRows.Count; i++)
                    {
                        var r = FilteredRows[i];
                        var isSelected = SelectedItems.Contains(r.Item);
                        <tr class="row-clickable @(isSelected ? "row-selected" : null)"
                            @onclick="(MouseEventArgs e) => HandleRowClick(r.Item, e)"
                            title="Select item (Ctrl/Cmd for multi, Shift for range)">
                            <td>
                                <button class="link-button"
                                        @onclick:stopPropagation="true"
                                        @onclick="(MouseEventArgs e) => HandleRowClick(r.Item, e)">
                                    @r.Item
                                </button>
                            </td>
                            <td>@r.Description</td>
                            <td class="num">@r.OnOrderOpen</td>
                            <td class="num">@r.InTransit</td>
                            <td class="num">@r.Alloc</td>
                            <td class="num @HighlightIf(r.BKO > 0)">@r.BKO</td>
                            <td class="num">@r.TotalOpenCost.ToString("C")</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="totals">
                        <td colspan="2">
                            <div class="chips-row">
                                @if (SelectedItems.Count > 0)
                                {
                                    <div class="chips">
                                        <span class="chips-label">Filtering by</span>
                                        @foreach (var it in SelectedItems.OrderBy(x => x))
                                        {
                                            <span class="chip" title="Remove filter">
                                                <strong>@it</strong>
                                                <button class="chip-x" @onclick="() => RemoveItem(it)" aria-label="Remove">×</button>
                                            </span>
                                        }
                                        <button class="chip-clear" @onclick="ClearItemFilter" aria-label="Clear all">Clear all</button>
                                    </div>
                                }
                            </div>
                        </td>
                        <td class="num">@FilteredRows.Sum(x => x.OnOrderOpen)</td>
                        <td class="num">@FilteredRows.Sum(x => x.InTransit)</td>
                        <td class="num">@FilteredRows.Sum(x => x.Alloc)</td>
                        <td class="num">@FilteredRows.Sum(x => x.BKO)</td>
                        <td class="num">@FilteredRows.Sum(x => x.TotalOpenCost).ToString("C")</td>
                    </tr>
                    <tr class="totals-sub">
                        <td colspan="7">
                            In Transit: <strong>@FilteredRows.Sum(x => x.InTransitCost).ToString("C")</strong>
                            &nbsp; | &nbsp; Backorders Awaiting Release: <strong>@FilteredRows.Sum(x => x.BackorderCost).ToString("C")</strong>
                            &nbsp; | &nbsp; Backordered: <strong>@FilteredRows.Sum(x => x.BackorderCost).ToString("C")</strong>
                            &nbsp; | &nbsp; Unacknowledged: <strong>@FilteredRows.Sum(x => x.UnacknowledgedCost).ToString("C")</strong>
                            &nbsp; | &nbsp; Open Items: <strong>@FilteredRows.Sum(x => x.TotalOpenCost).ToString("C")</strong>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </section>

    <!-- PO lines -->
    <section class="card" id="oplines" @ref="_oplinesSection">
        <header class="section-header">
            <h4>Open PO Lines</h4>
            @if (SelectedItems.Count > 0)
            {
                <div class="chips compact">
                    <span class="chips-label">Showing PO lines for:</span>
                    @foreach (var it in SelectedItems.OrderBy(x => x))
                    {
                        <span class="chip" title="Remove filter">
                            <strong>@it</strong>
                            <button class="chip-x" @onclick="() => RemoveItem(it)" aria-label="Remove">×</button>
                        </span>
                    }
                    <button class="chip-clear" @onclick="ClearItemFilter" aria-label="Clear all">Clear</button>
                </div>
            }
        </header>

        <div class="table-wrap">
            <table class="tbl tbl-lines" role="grid" aria-label="Open PO lines">
                <thead>
                    <tr>
                        <th class="w-po">PO#</th>
                        <th class="w-ln">Ln</th>
                        <th class="w-so">SO#</th>
                        <th>Vendor</th>
                        <th class="w-date">Date</th>
                        <th class="num">Qty Ord</th>
                        <th class="num">Open</th>
                        <th class="num">In Transit</th>
                        <th class="num">Alloc</th>
                        <th class="num">BKO</th>
                        <th class="num">Unit Cost</th>
                        <th class="num">Total Open Cost</th>
                        <th class="num">Rcv</th>
                        <th class="w-status">Status</th>
                        @* <th class="w-cancel">Cancel</th> *@
                    </tr>
                </thead>
                <tbody>
                    @if (VisibleOpenLines.Count == 0)
                    {
                        <tr><td colspan="15" class="muted">No open PO lines @(SelectedItems.Count == 0 ? "" : $"for {string.Join(", ", SelectedItems.OrderBy(x => x))}").</td></tr>
                    }
                    else
                    {
                        @foreach (var p in VisibleOpenLines)
                        {
                            <tr>
                                <td>
                                    <button class="link-button" title="Open PO details"
                                            @onclick="() => OpenPODetails(p.PONumber)">
                                        @p.PONumber
                                    </button>
                                </td>
                                <td class="num">@p.Line</td>
                                <td>@p.SONumber</td>
                                <td>@p.Vendor</td>
                                <td>@p.Date.ToString("MM/dd/yyyy")</td>
                                <td class="num">@p.QtyOrdered</td>
                                <td class="num">@p.Open</td>
                                <td class="num">@p.InTransit</td>
                                <td class="num">@p.Alloc</td>
                                <td class="num">@p.BKO</td>
                                <td class="num">@p.UnitCost.ToString("C")</td>
                                <td class="num">@p.TotalOpenCost.ToString("C")</td>
                                <td class="num">@p.Rcv</td>
                                <td>@p.Status</td>
                                @* <td><button class="btn-danger" @onclick="() => CancelLine(p)">Cancel</button></td> *@
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <footer class="oplines-actions">
            <button style="border: 1px solid black;" class="btn" @onclick="Print">Print</button>
            @* <button class="btn-danger" @onclick="CancelSelected">Cancel PO Line(s)</button> *@
        </footer>
    </section>
</div>

@code {
    // ======== SIDEBAR INTEGRATION ========
    private void OnSidebarChanged() => InvokeAsync(StateHasChanged);

    private async Task OnSidebarItemClicked(SidebarItem item)
    {
        var section = Sidebar.Sections.FirstOrDefault(s => s.Items.Contains(item));
        var key = section?.SectionKey ?? section?.Title ?? "";

        if (string.Equals(key, "status", StringComparison.OrdinalIgnoreCase))
        {
            Status = MapStatus(item.Text);
            Sidebar.SetSelection("status", item.Text);
            UpdateUrl(new Dictionary<string, string?> { ["status"] = item.Text });
        }
        else if (string.Equals(key, "option", StringComparison.OrdinalIgnoreCase))
        {
            Sidebar.SetSelection("option", item.Text);
        }

        StateHasChanged();
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        Sidebar.StateChanged -= OnSidebarChanged;
        Nav.LocationChanged -= OnLocationChanged;
        if (ReferenceEquals(Sidebar.ItemSelectedHandler, (Func<SidebarItem, Task>)OnSidebarItemClicked))
            Sidebar.ItemSelectedHandler = null;
    }

    // ======== STATUS ========
    public enum StatusKind { All, Backorders, InTransit, Unacknowledged }
    private static StatusKind MapStatus(string s) => s switch
    {
        "Backorders" => StatusKind.Backorders,
        "In Transit" => StatusKind.InTransit,
        "Unacknowledged" => StatusKind.Unacknowledged,
        _ => StatusKind.All
    };
    [Parameter] public StatusKind Status { get; set; } = StatusKind.All;

    // ======== DATA ========
    private readonly List<Row> Rows = new();
    private List<Row> FilteredRows => ApplyStatusFilter(Rows, Status);
    private readonly List<OpenPOLine> OpenLines = new();

    // ======== MULTI-SELECTION VIA URL ========
    private readonly HashSet<string> SelectedItems = new(StringComparer.OrdinalIgnoreCase);
    private int? _anchorIndex; // last anchor row index for shift-range

    private ElementReference _oplinesSection;

    private List<OpenPOLine> VisibleOpenLines =>
        SelectedItems.Count == 0
            ? OpenLines
            : OpenLines.Where(x => SelectedItems.Contains(x.Item)).ToList();

    protected override void OnInitialized()
    {
        Sidebar.SetSections(
            BuildSections(),
            new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase)
            {
                ["option"] = "Items On Order",
                ["status"] = "All"
            });

        Sidebar.ItemSelectedHandler = OnSidebarItemClicked;
        Sidebar.StateChanged += OnSidebarChanged;

        ReadUrlState();
        Nav.LocationChanged += OnLocationChanged;

        // Demo seed data (replace with your real source)
        Rows.AddRange(new[]
        {
            new Row("A02", "1/4\" Drive (F) x 3/8\" (M) Adapter", 1, 0, 0, 1, 23.50m),
            new Row("A20", "3/8\" Drive (F) x 1/2\" (M) Adapter", 2, 2, 0, 0, 45.00m),
            new Row("A23", "3/8\" Drive (F) x 1/2\" (M) Adapter", 1, 1, 0, 1, 22.10m),
            new Row("A35", "1/2\" Drive (F) x 3/4\" (M) Adapter", 1, 0, 0, 0, 18.75m),
            new Row("AF12201", "1220-1 AIR TOOL OIL PINT", 18, 18, 0, 0, 180.00m),
            new Row("AP328", "1/2\"Dr.(F) x 1/2\"(M) Imp Adapt,Ball Type", 1, 1, 0, 0, 19.30m),
            new Row("AS6SB", "Stubby Air Slide Hammer", 1, 1, 0, 0, 159.99m),
            new Row("CAT3160", "3/16\" Orbital Sander 6\"", 1, 2, 0, 1, 299.00m)
        });

        OpenLines.AddRange(new[]
        {
            new OpenPOLine
            {
                Item = "CAT3160",
                PONumber = "PO-0000100807", Line = 1, SONumber = "0002916666",
                Vendor = "CQT", Date = new DateTime(2025, 09, 30),
                QtyOrdered = 2, Open = 2, InTransit = 0, Alloc = 0, BKO = 1,
                UnitCost = 299.00m, Rcv = 0, Status = "Open"
            },
            new OpenPOLine
            {
                Item = "A20",
                PONumber = "PO-0000100821", Line = 3, SONumber = "0002917777",
                Vendor = "CQT", Date = new DateTime(2025, 09, 28),
                QtyOrdered = 5, Open = 2, InTransit = 2, Alloc = 0, BKO = 0,
                UnitCost = 45.00m, Rcv = 3, Status = "Partial"
            },
            new OpenPOLine
            {
                Item = "A02",
                PONumber = "PO-0000100821", Line = 4, SONumber = "0002917777",
                Vendor = "CQT", Date = new DateTime(2025, 09, 28),
                QtyOrdered = 1, Open = 1, InTransit = 0, Alloc = 0, BKO = 1,
                UnitCost = 23.50m, Rcv = 0, Status = "Open"
            }
        });
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        ReadUrlState();
        InvokeAsync(StateHasChanged);
    }

    private void ReadUrlState()
    {
        var abs = Nav.ToAbsoluteUri(Nav.Uri);
        var q = QueryHelpers.ParseQuery(abs.Query);

        if (q.TryGetValue("status", out var sVal) && !string.IsNullOrWhiteSpace(sVal))
            Status = MapStatus(sVal!);
        else
            Status = StatusKind.All;

        SelectedItems.Clear();
        if (q.TryGetValue("items", out var itemsVals))
        {
            foreach (var raw in itemsVals)
            {
                if (string.IsNullOrWhiteSpace(raw)) continue;
                foreach (var part in raw.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                    SelectedItems.Add(part);
            }
        }
    }

    private void UpdateUrl(IDictionary<string, string?> scalarUpdates, bool replace = false)
    {
        var abs = Nav.ToAbsoluteUri(Nav.Uri);
        var rel = Nav.ToBaseRelativePath(abs.ToString()).TrimStart('/');

        var cut = rel.IndexOfAny(new[] { '?', '#' });
        var pathOnly = cut >= 0 ? rel[..cut] : rel;

        var parsed = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(abs.Query);
        var scalars = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);
        foreach (var kv in parsed)
        {
            if (!string.Equals(kv.Key, "items", StringComparison.OrdinalIgnoreCase))
                scalars[kv.Key] = kv.Value.LastOrDefault();
        }

        foreach (var kv in scalarUpdates)
        {
            if (string.IsNullOrWhiteSpace(kv.Value))
                scalars.Remove(kv.Key);
            else
                scalars[kv.Key] = kv.Value;
        }

        var pairs = new List<string>();
        foreach (var kv in scalars.Where(kv => !string.IsNullOrWhiteSpace(kv.Value)))
            pairs.Add($"{Uri.EscapeDataString(kv.Key)}={Uri.EscapeDataString(kv.Value!)}".Replace("%20", "+"));

        foreach (var it in SelectedItems)
            pairs.Add($"items={Uri.EscapeDataString(it)}");

        var qs = string.Join("&", pairs);
        var href = "/" + pathOnly + (string.IsNullOrEmpty(qs) ? "" : "?" + qs);

        Nav.NavigateTo(href, replace);
    }

    // ===== Click handling with Ctrl/Cmd and Shift support =====
    private async Task HandleRowClick(string item, MouseEventArgs e)
    {
        var list = FilteredRows;
        var idx = FindIndex(list, item);
        if (idx < 0) idx = 0;

        bool scrolled = false;

        if (e.ShiftKey && _anchorIndex is int anchor && anchor >= 0 && anchor < list.Count)
        {
            // Range select between anchor and current
            var start = Math.Min(anchor, idx);
            var end = Math.Max(anchor, idx);
            for (int i = start; i <= end; i++)
                SelectedItems.Add(list[i].Item);

            scrolled = true; // likely moving to PO lines after a range selection is useful
        }
        else if (e.CtrlKey || e.MetaKey)
        {
            // Toggle single without disturbing others
            if (!SelectedItems.Add(item))
                SelectedItems.Remove(item);

            // Set anchor to current to define future shift range start
            _anchorIndex = idx;
        }
        else
        {
            // Plain click: single select + set anchor
            SelectedItems.Clear();
            SelectedItems.Add(item);
            _anchorIndex = idx;
            scrolled = true;
        }

        UpdateUrl(new Dictionary<string, string?>(), replace: false);

        if (scrolled)
            await ScrollToPOLinesAsync();

        StateHasChanged();
    }

    private static int FindIndex(List<Row> list, string item)
    {
        for (int i = 0; i < list.Count; i++)
            if (string.Equals(list[i].Item, item, StringComparison.OrdinalIgnoreCase))
                return i;
        return -1;
    }

    private void RemoveItem(string item)
    {
        if (!SelectedItems.Remove(item)) return;
        UpdateUrl(new Dictionary<string, string?>(), replace: SelectedItems.Count == 0);
        StateHasChanged();
    }

    private async Task ScrollToPOLinesAsync()
    {
        try { await JS.InvokeVoidAsync("blazorIoO.scrollIntoView", _oplinesSection); }
        catch { /* best-effort */ }
    }

    private void ClearItemFilter()
    {
        if (SelectedItems.Count == 0) return;
        SelectedItems.Clear();
        _anchorIndex = null;

        var abs = Nav.ToAbsoluteUri(Nav.Uri);
        var rel = Nav.ToBaseRelativePath(abs.ToString()).TrimStart('/');
        var cut = rel.IndexOfAny(new[] { '?', '#' });
        var pathOnly = cut >= 0 ? rel[..cut] : rel;

        var parsed = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(abs.Query);
        var remaining = parsed
            .Where(kv => !string.Equals(kv.Key, "items", StringComparison.OrdinalIgnoreCase))
            .ToDictionary(kv => kv.Key, kv => kv.Value.LastOrDefault(), StringComparer.OrdinalIgnoreCase);

        var qs = string.Join("&", remaining
            .Where(kv => !string.IsNullOrWhiteSpace(kv.Value))
            .Select(kv => $"{Uri.EscapeDataString(kv.Key)}={Uri.EscapeDataString(kv.Value!)}"));

        var href = "/" + pathOnly + (string.IsNullOrEmpty(qs) ? "" : "?" + qs);
        Nav.NavigateTo(href, replace: true);
        StateHasChanged();
    }

    private void OpenPODetails(string poNumber) => Console.WriteLine($"Open PO details: {poNumber}");
    private void CancelLine(OpenPOLine line) => Console.WriteLine($"Cancel line {line.PONumber} / {line.Line}");
    private void CancelSelected() { /* bulk cancel */ }
    private async Task Print()
    {
        // var subtitle = $"Status: {Status}"
        //     + (SelectedItems.Count > 0 ? $" • Items: {string.Join(", ", SelectedItems.OrderBy(x => x))}" : string.Empty);

        var report = new ItemsOnOrderReport
        {
            Title = "Items on Order",
            Subtitle = null,
            Company = "IBN Dealer Suite",
            ReportDate = DateTime.Today,
            ShowTotals = true,
            Culture = System.Globalization.CultureInfo.CurrentCulture,
            Rows = FilteredRows.Select(r => new ItemsOnOrderRow
            {
                Item = r.Item,
                Description = r.Description,

                // Table numeric columns (OK to mirror your “On Order Open” to both)
                OnOrder = r.OnOrderOpen,
                Open = r.OnOrderOpen,
                InTransit = r.InTransit,
                Alloc = r.Alloc,
                Bko = r.BKO,

                // >>> Cost fields pulled straight from the grid VM <<<
                TotalOpenCost = r.TotalOpenCost,
                InTransitCost = r.InTransitCost,
                BackorderedCost = r.BackorderCost,
                UnacknowledgedCost = r.UnacknowledgedCost
            }).ToList()
        };

        var pdfBytes = await ReportService.GenerateAsync(report);
        var fileName = $"ItemsOnOrder_{DateTime.Now:yyyyMMdd_HHmm}.pdf";
        await JS.InvokeVoidAsync("files.save", fileName, Convert.ToBase64String(pdfBytes));
    }

    private static List<SidebarSection> BuildSections()
    {
        static SidebarItem SI(string text, string url, bool selected = false, string? icon = null) => new SidebarItem
        {
            Text = text,
            Url = url,
            Selected = selected,
            Icon = icon
        };

        const string Base = "/po-transfer";

        return new()
        {
            new SidebarSection
            {
                SectionKey = "option",
                Title = "Option",
                Items =
                {
                    SI("Items On Order",        $"{Base}/items-on-order", selected: true),
                    SI("Purchase Orders",       $"{Base}/purchase-orders"),
                    SI("Receipt of Product",    $"{Base}/receipt-of-product")
                }
            },
            new SidebarSection
            {
                SectionKey = "status",
                Title = "Status",
                Items =
                {
                    SI("All",            $"{Base}/items-on-order?status=All",           selected: true),
                    SI("Backorders",     $"{Base}/items-on-order?status=Backorders"),
                    SI("In Transit",     $"{Base}/items-on-order?status=In%20Transit"),
                    SI("Unacknowledged", $"{Base}/items-on-order?status=Unacknowledged")
                }
            },
            new SidebarSection
            {
                SectionKey = "legend",
                Title = "Item Legend",
                IsLegend = true,
                Items =
                {
                    new SidebarItem { Text = "Discontinued",   ColorHex = "#e11d48" },
                    new SidebarItem { Text = "Price Confirm",  ColorHex = "#111827" },
                    new SidebarItem { Text = "CSI",            ColorHex = "#2563eb" },
                    new SidebarItem { Text = "Drop Ship",      ColorHex = "#f59e0b" },
                    new SidebarItem { Text = "Special Orders", ColorHex = "#eab308" }
                }
            }
        };
    }

    private static List<Row> ApplyStatusFilter(List<Row> source, StatusKind status) =>
        status switch
        {
            StatusKind.All => source,
            StatusKind.Backorders => source.Where(r => r.BKO > 0).ToList(),
            StatusKind.InTransit => source.Where(r => r.InTransit > 0).ToList(),
            StatusKind.Unacknowledged => source.Where(r => r.IsUnacknowledged).ToList(),
            _ => source
        };

    private string HighlightIf(bool cond) => cond ? "hl" : "";

    private sealed class Row
    {
        public Row(string item, string desc, int onOrderOpen, int inTransit, int alloc, int bko, decimal unitCost)
        { Item = item; Description = desc; OnOrderOpen = onOrderOpen; InTransit = inTransit; Alloc = alloc; BKO = bko; UnitCost = unitCost; }
        public string Item { get; set; }
        public string Description { get; set; }
        public int OnOrderOpen { get; set; }
        public int InTransit { get; set; }
        public int Alloc { get; set; }
        public int BKO { get; set; }
        public decimal UnitCost { get; set; }
        public decimal TotalOpenCost => UnitCost * Math.Max(OnOrderOpen, 0);
        public decimal InTransitCost => UnitCost * InTransit;
        public decimal BackorderCost => UnitCost * BKO;
        public bool IsUnacknowledged => OnOrderOpen > 0 && InTransit == 0 && BKO == 0 && Alloc == 0;
        public decimal UnacknowledgedCost => IsUnacknowledged ? TotalOpenCost : 0m;
    }
}

<script>
    window.blazorIoO = window.blazorIoO || {};
    window.blazorIoO.scrollIntoView = function (el) {
        if (!el) return;
        el.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });
    };
</script>
