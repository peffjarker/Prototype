@page "/po-transfer/items-on-order"

@using System.Globalization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.WebUtilities
@using Prototype.Components.Layout
@using Prototype.Components.Layout.Navigation
@using Prototype.Components.Layout.Navigation.Sidebar
@using Prototype.Components.Services
@using Prototype.Components.Services.Reports
@using Utils
@using global::Services
@using Telerik.Blazor
@using Telerik.Blazor.Components

@inherits PageWithSidebarBase

@inject IJSRuntime JS
@inject IItemsOnOrderPdfService ReportService

<div class="wrap">
    <header class="header">
        <h3 class="title">Items On Order</h3>
    </header>

    <!-- Items Grid -->
    <section class="card">
        <TelerikGrid Data="@FilteredRows"
                     SelectionMode="@GridSelectionMode.Multiple"
                     @bind-SelectedItems="@SelectedItemsCollection"
                     Pageable="true"
                     PageSize="20"
                     Sortable="true"
                     FilterMode="@GridFilterMode.FilterRow"
                     Resizable="true"
                     Reorderable="true"
                     Groupable="true"
                     ShowColumnMenu="true"
                     OnRowClick="@OnRowClickHandler"
                     @ref="@ItemsGridRef">
            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                <GridCommandButton Command="CsvExport" Icon="@SvgIcon.FileCsv">Export to CSV</GridCommandButton>
                <GridSearchBox DebounceDelay="300" />
                <TelerikButton OnClick="@ClearAllFilters" Icon="@SvgIcon.FilterClear">Clear Filters</TelerikButton>
                <span style="margin-left: auto; display: flex; gap: 1rem; align-items: center;">
                    <span style="font-weight: bold;">Total Items: @FilteredRows.Count</span>
                    <span style="font-weight: bold; color: #007bff;">Selected: @SelectedItems.Count</span>
                    @if (SelectedItems.Count > 0)
                    {
                        <TelerikButton OnClick="@(() => { SelectedItemsCollection = new List<Row>(); })"
                                       Icon="@SvgIcon.X"
                                       FillMode="@ThemeConstants.Button.FillMode.Flat">
                            Clear Selection
                        </TelerikButton>
                    }
                </span>
            </GridToolBarTemplate>
            <GridExport>
                <GridExcelExport FileName="items-on-order" AllPages="true" />
                <GridCsvExport FileName="items-on-order" AllPages="true" />
            </GridExport>
            <GridColumns>
                <GridCheckboxColumn SelectAll="true" Width="60px" Locked="true" Title="Select" />
                <GridColumn Field="@nameof(Row.Item)" Title="Item" Width="140px" Locked="true">
                    <Template>
                        @{
                            var row = (Row)context;
                            <button class="link-button" @onclick="() => HandleItemClick(row.Item)" @onclick:stopPropagation="true">
                                @row.Item
                            </button>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Row.Description)" Title="Description" Width="350px" />
                <GridColumn Field="@nameof(Row.OnOrderOpen)" Title="On Order Open" Width="160px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var row = (Row)context;
                            <span class="@(row.OnOrderOpen > 10 ? "badge badge-warning" : "")">@row.OnOrderOpen</span>
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = FilteredRows.Sum(x => x.OnOrderOpen);
                            <strong style="color: #007bff;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(Row.InTransit)" Title="In Transit" Width="140px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var row = (Row)context;
                            @if (row.InTransit > 0)
                            {
                                <span class="badge badge-info">@row.InTransit</span>
                            }
                            else
                            {
                                <span>@row.InTransit</span>
                            }
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = FilteredRows.Sum(x => x.InTransit);
                            <strong style="color: #17a2b8;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(Row.Alloc)" Title="Alloc" Width="120px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = FilteredRows.Sum(x => x.Alloc);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(Row.BKO)" Title="BKO" Width="120px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var row = (Row)context;
                            @if (row.BKO > 0)
                            {
                                <span class="badge badge-danger">@row.BKO</span>
                            }
                            else
                            {
                                <span>@row.BKO</span>
                            }
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = FilteredRows.Sum(x => x.BKO);
                            <strong style="color: #dc3545;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(Row.UnitCost)" Title="Unit Cost" Width="140px" TextAlign="@ColumnTextAlign.Right" DisplayFormat="{0:C}" />
                <GridColumn Field="@nameof(Row.TotalOpenCost)" Title="Total Open Cost" Width="170px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var row = (Row)context;
                            @row.TotalOpenCost.ToString("C")
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = FilteredRows.Sum(x => x.TotalOpenCost);
                            <strong style="font-size: 1.1em; color: #28a745;">@total.ToString("C")</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
            </GridColumns>
            <GridSettings>
                <GridPagerSettings InputType="PagerInputType.Input"
                                   PageSizes="@(new List<int?> { 10, 20, 50, 100, null })" />
            </GridSettings>
        </TelerikGrid>

        @if (SelectedItems.Count > 0)
        {
            <div style="padding: 1rem; background: #f8f9fa; border-top: 1px solid #dee2e6;">
                <div class="chips-row">
                    <div class="chips">
                        <span class="chips-label" style="font-weight: 600;">Filtering PO Lines by Selected Items:</span>
                        @foreach (var it in SelectedItems.OrderBy(x => x))
                        {
                            <span class="chip" title="Remove filter">
                                <strong>@it</strong>
                                <button class="chip-x" @onclick="() => RemoveItem(it)" aria-label="Remove">×</button>
                            </span>
                        }
                        <button class="chip-clear" @onclick="ClearItemFilter" aria-label="Clear all">Clear all</button>
                    </div>
                </div>
            </div>
        }

        <div style="padding: 1rem; background: #fff; border-top: 1px solid #dee2e6; display: flex; gap: 2rem; flex-wrap: wrap; font-size: 0.875rem;">
            <div>
                <span style="color: #6c757d;">In Transit:</span>
                <strong style="color: #17a2b8;">@FilteredRows.Sum(x => x.InTransitCost).ToString("C")</strong>
            </div>
            <div>
                <span style="color: #6c757d;">Backorders Awaiting Release:</span>
                <strong style="color: #ffc107;">@FilteredRows.Sum(x => x.BackorderCost).ToString("C")</strong>
            </div>
            <div>
                <span style="color: #6c757d;">Backordered:</span>
                <strong style="color: #dc3545;">@FilteredRows.Sum(x => x.BackorderCost).ToString("C")</strong>
            </div>
            <div>
                <span style="color: #6c757d;">Unacknowledged:</span>
                <strong>@FilteredRows.Sum(x => x.UnacknowledgedCost).ToString("C")</strong>
            </div>
            <div>
                <span style="color: #6c757d;">Open Items:</span>
                <strong style="color: #28a745; font-size: 1.1em;">@FilteredRows.Sum(x => x.TotalOpenCost).ToString("C")</strong>
            </div>
        </div>
    </section>

    <!-- PO Lines Grid -->
    <section class="panel" id="oplines" @ref="_oplinesSection" style="margin-top: 2rem;">
        <header class="section-header" style="background: #f8f9fa; padding: 1rem; border-bottom: 2px solid #dee2e6;">
            <h4 style="margin: 0; display: flex; align-items: center; gap: 1rem;">
                Open PO Lines
                <span class="badge" style="background: #007bff; color: white; padding: 0.35em 0.65em;">
                    @VisibleOpenLines.Count Lines
                </span>
            </h4>
            @if (SelectedItems.Count > 0)
            {
                <div class="chips compact" style="margin-top: 0.5rem;">
                    <span class="chips-label">Showing PO lines for:</span>
                    @foreach (var it in SelectedItems.OrderBy(x => x))
                    {
                        <span class="chip" title="Remove filter">
                            <strong>@it</strong>
                            <button class="chip-x" @onclick="() => RemoveItem(it)" aria-label="Remove">×</button>
                        </span>
                    }
                    <button class="chip-clear" @onclick="ClearItemFilter" aria-label="Clear all">Clear</button>
                </div>
            }
        </header>

        <TelerikGrid Data="@VisibleOpenLines"
                     Pageable="true"
                     PageSize="20"
                     Sortable="true"
                     FilterMode="@GridFilterMode.FilterRow"
                     Resizable="true"
                     Reorderable="true"
                     Groupable="true"
                     ShowColumnMenu="true"
                     @ref="@POLinesGridRef">
            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                <GridCommandButton Command="CsvExport" Icon="@SvgIcon.FileCsv">Export to CSV</GridCommandButton>
                <GridSearchBox DebounceDelay="300" />
                <TelerikButton OnClick="@ClearPOLinesFilters" Icon="@SvgIcon.FilterClear">Clear Filters</TelerikButton>
                <span style="margin-left: auto; font-weight: bold;">
                    Total PO Lines: @VisibleOpenLines.Count
                </span>
            </GridToolBarTemplate>
            <GridExport>
                <GridExcelExport FileName="open-po-lines" AllPages="true" />
                <GridCsvExport FileName="open-po-lines" AllPages="true" />
            </GridExport>
            <GridColumns>
                <GridColumn Field="@nameof(OpenPOLine.Item)" Title="Item" Width="140px" Locked="true" />
                <GridColumn Field="@nameof(OpenPOLine.PONumber)" Title="PO#" Width="160px">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            <button class="link-button" title="Open PO details" @onclick="() => OpenPODetails(line.PONumber)">
                                @line.PONumber
                            </button>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.Line)" Title="Ln" Width="80px" TextAlign="@ColumnTextAlign.Right" />
                <GridColumn Field="@nameof(OpenPOLine.SONumber)" Title="SO#" Width="140px" />
                <GridColumn Field="@nameof(OpenPOLine.Vendor)" Title="Vendor" Width="140px" />
                <GridColumn Field="@nameof(OpenPOLine.Date)" Title="Date" Width="130px" DisplayFormat="{0:MM/dd/yyyy}">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            var daysDiff = (DateTime.Today - line.Date).Days;
                            var dateClass = daysDiff > 30 ? "text-danger" : daysDiff > 14 ? "text-warning" : "";
                            <span class="@dateClass">@line.Date.ToString("MM/dd/yyyy")</span>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.QtyOrdered)" Title="Qty Ord" Width="110px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.QtyOrdered);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.Open)" Title="Open" Width="110px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            @if (line.Open > 0)
                            {
                                <span style="font-weight: 600; color: #007bff;">@line.Open</span>
                            }
                            else
                            {
                                <span>@line.Open</span>
                            }
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.Open);
                            <strong style="color: #007bff;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.InTransit)" Title="In Transit" Width="130px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            @if (line.InTransit > 0)
                            {
                                <span class="badge badge-info">@line.InTransit</span>
                            }
                            else
                            {
                                <span>@line.InTransit</span>
                            }
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.InTransit);
                            <strong style="color: #17a2b8;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.Alloc)" Title="Alloc" Width="110px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.Alloc);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.BKO)" Title="BKO" Width="110px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            @if (line.BKO > 0)
                            {
                                <span class="badge badge-danger">@line.BKO</span>
                            }
                            else
                            {
                                <span>@line.BKO</span>
                            }
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.BKO);
                            <strong style="color: #dc3545;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.UnitCost)" Title="Unit Cost" Width="140px" TextAlign="@ColumnTextAlign.Right" DisplayFormat="{0:C}">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            @line.UnitCost.ToString("C")
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.TotalOpenCost)" Title="Total Open Cost" Width="170px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            @line.TotalOpenCost.ToString("C")
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.TotalOpenCost);
                            <strong style="font-size: 1.1em; color: #28a745;">@total.ToString("C")</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.Rcv)" Title="Rcv" Width="100px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = VisibleOpenLines.Sum(x => x.Rcv);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(OpenPOLine.Status)" Title="Status" Width="130px">
                    <Template>
                        @{
                            var line = (OpenPOLine)context;
                            var statusClass = line.Status.ToLower() switch
                            {
                                "open" => "badge badge-success",
                                "partial" => "badge badge-warning",
                                "closed" => "badge badge-secondary",
                                _ => "badge badge-info"
                            };
                            <span class="@statusClass">@line.Status</span>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
            <GridSettings>
                <GridPagerSettings InputType="PagerInputType.Input"
                                   PageSizes="@(new List<int?> { 10, 20, 50, 100, null })" />
            </GridSettings>
        </TelerikGrid>

        <footer class="actions" style="padding: 1rem; background: #f8f9fa; border-top: 1px solid #dee2e6;">
            <button class="btn btn-primary" @onclick="Print">
                <span class="k-icon k-i-print"></span> Print Report
            </button>
        </footer>
    </section>
</div>

@code {
    // Enable franchise selector in sidebar
    protected override bool ShowFranchiseSelector => true;

    // Grid references for programmatic control
    private TelerikGrid<Row>? ItemsGridRef;
    private TelerikGrid<OpenPOLine>? POLinesGridRef;


    // ============================================================
    // Page contract & URL bindings (overrides + sidebar + decode)
    // ============================================================
    protected override string BasePath => "/po-transfer/items-on-order";

    protected override IReadOnlyDictionary<string, string?> Scalars =>
        new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase)
        {
            ["dealer"] = DealerId,
            ["option"] = "Items On Order",
            ["status"] = Status.ToString()
        };

    protected override IReadOnlyCollection<string> MultiValues => SelectedItems;

    protected override void ReadFromUrl()
    {
        var map = QueryStringMap.Read(Nav);

        var abs = Nav.ToAbsoluteUri(Nav.Uri);
        var q = QueryHelpers.ParseQuery(abs.Query);

        DealerId = q.TryGetValue("dealer", out var dVal) && !string.IsNullOrWhiteSpace(dVal)
            ? dVal.ToString()
            : null;

        if (q.TryGetValue("status", out var sVal) && !string.IsNullOrWhiteSpace(sVal))
            Status = MapStatus(sVal!);
        else
            Status = StatusKind.All;

        SelectedItems.Clear();
        if (q.TryGetValue("items", out var itemsVals))
        {
            foreach (var raw in itemsVals)
            {
                if (string.IsNullOrWhiteSpace(raw)) continue;
                foreach (var part in raw.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                    SelectedItems.Add(part);
            }
        }
    }

    // ============================================================
    // Sidebar facets
    // ============================================================

    protected override IEnumerable<Facet> Facets()
    {
        yield return new Facet(
            Key: "option",
            Title: "Option",
            Options: () => new[]
            {
                new FacetOption("Items On Order","Items On Order", Href: AppendPreserved("/po-transfer/items-on-order?status=All")),
                new FacetOption("Purchase Orders","Purchase Orders", Href: AppendPreserved("/po-transfer/purchase-orders")),
                new FacetOption("Receipt of Product","Receipt of Product", Href: AppendPreserved("/po-transfer/receipt-of-product?status=All"))
            }
        );

        yield return new Facet(
            Key: "status",
            Title: "Status",
            Options: () => new[]
            {
                new FacetOption("All","All", Href: AppendPreserved($"{BasePath}?status=All")),
                new FacetOption("Backorders","Backorders", Href: AppendPreserved($"{BasePath}?status=Backorders")),
                new FacetOption("In Transit","In Transit", Href: AppendPreserved($"{BasePath}?status=In Transit")),
                new FacetOption("Unacknowledged","Unacknowledged", Href: AppendPreserved($"{BasePath}?status=Unacknowledged"))
            }
        );

        yield return new Facet(
            Key: "legend",
            Title: "Item Legend",
            Options: () => new[]
            {
                new FacetOption("Discontinued","disc", ColorHex:"#e11d48"),
                new FacetOption("Price Confirm","price", ColorHex:"#111827"),
                new FacetOption("CSI","csi", ColorHex:"#2563eb"),
                new FacetOption("Drop Ship","ds", ColorHex:"#f59e0b"),
                new FacetOption("Special Orders","so", ColorHex:"#eab308")
            },
            IsLegend: true
        );
    }

    protected override void OnSidebarClick(SidebarItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.Url))
            Nav.NavigateTo(AppendPreserved(item.Url));
    }

    // ============================================================
    // Lifecycle & URL-change wiring
    // ============================================================
    protected override void OnInitialized()
    {
        // Note: Base.OnInitialized() calls ReadFromUrl() and RebuildSidebar()
        // so we need to call it AFTER we set up our data

        Rows.AddRange(new[]
        {
            new Row("A02", "1/4\" Drive (F) x 3/8\" (M) Adapter", 1, 0, 0, 1, 23.50m),
            new Row("A20", "3/8\" Drive (F) x 1/2\" (M) Adapter", 2, 2, 0, 0, 45.00m),
            new Row("A23", "3/8\" Drive (F) x 1/2\" (M) Adapter", 1, 1, 0, 1, 22.10m),
            new Row("A35", "1/2\" Drive (F) x 3/4\" (M) Adapter", 1, 0, 0, 0, 18.75m),
            new Row("AF12201", "1220-1 AIR TOOL OIL PINT", 18, 18, 0, 0, 180.00m),
            new Row("AP328", "1/2\"Dr.(F) x 1/2\"(M) Imp Adapt,Ball Type", 1, 1, 0, 0, 19.30m),
            new Row("AS6SB", "Stubby Air Slide Hammer", 1, 1, 0, 0, 159.99m),
            new Row("CAT3160", "3/16\" Orbital Sander 6\"", 1, 2, 0, 1, 299.00m)
        });

        OpenLines.AddRange(new[]
        {
            new OpenPOLine
            {
                Item = "CAT3160",
                PONumber = "PO-0000100807", Line = 1, SONumber = "0002916666",
                Vendor = "CQT", Date = new DateTime(2025, 09, 30),
                QtyOrdered = 2, Open = 2, InTransit = 0, Alloc = 0, BKO = 1,
                UnitCost = 299.00m, Rcv = 0, Status = "Open"
            },
            new OpenPOLine
            {
                Item = "A20",
                PONumber = "PO-0000100821", Line = 3, SONumber = "0002917777",
                Vendor = "CQT", Date = new DateTime(2025, 09, 28),
                QtyOrdered = 5, Open = 2, InTransit = 2, Alloc = 0, BKO = 0,
                UnitCost = 45.00m, Rcv = 3, Status = "Partial"
            },
            new OpenPOLine
            {
                Item = "A02",
                PONumber = "PO-0000100821", Line = 4, SONumber = "0002917777",
                Vendor = "CQT", Date = new DateTime(2025, 09, 28),
                QtyOrdered = 1, Open = 1, InTransit = 0, Alloc = 0, BKO = 1,
                UnitCost = 23.50m, Rcv = 0, Status = "Open"
            }
        });

        // Call base AFTER setting up data
        base.OnInitialized();

        // Initialize selected items from URL AFTER base.OnInitialized()
        _selectedItemsCollection = FilteredRows.Where(r => SelectedItems.Contains(r.Item)).ToList();
    }

    // ============================================================
    // Page state, data & computed views
    // ============================================================
    private string? DealerId;
    public enum StatusKind { All, Backorders, InTransit, Unacknowledged }
    private static StatusKind MapStatus(string s) => s switch
    {
        "Backorders" => StatusKind.Backorders,
        "In Transit" => StatusKind.InTransit,
        "Unacknowledged" => StatusKind.Unacknowledged,
        _ => StatusKind.All
    };
    private StatusKind Status = StatusKind.All;

    private readonly HashSet<string> SelectedItems = new(StringComparer.OrdinalIgnoreCase);
    private IEnumerable<Row> _selectedItemsCollection = new List<Row>();
    private IEnumerable<Row> SelectedItemsCollection
    {
        get => _selectedItemsCollection;
        set
        {
            _selectedItemsCollection = value;
            SyncSelectedItems();
        }
    }

    private ElementReference _oplinesSection;

    private readonly List<Row> Rows = new();
    private readonly List<OpenPOLine> OpenLines = new();

    private List<Row> FilteredRows => ApplyStatusFilter(Rows, Status);
    private List<OpenPOLine> VisibleOpenLines =>
        SelectedItems.Count == 0 ? OpenLines : OpenLines.Where(x => SelectedItems.Contains(x.Item)).ToList();

    // ============================================================
    // UI event handlers
    // ============================================================
    private void SyncSelectedItems()
    {
        var newItems = _selectedItemsCollection.Select(r => r.Item).ToHashSet(StringComparer.OrdinalIgnoreCase);
        var changed = !SelectedItems.SetEquals(newItems);

        if (changed)
        {
            SelectedItems.Clear();
            foreach (var item in newItems)
            {
                SelectedItems.Add(item);
            }

            NavigateWithPageState();

            if (SelectedItems.Count > 0)
            {
                InvokeAsync(async () => await ScrollToPOLinesAsync());
            }
        }
    }

    private async Task OnRowClickHandler(GridRowClickEventArgs args)
    {
        // Grid handles selection automatically, we just need to scroll
        if (SelectedItems.Count > 0)
        {
            await ScrollToPOLinesAsync();
        }
    }

    private void HandleItemClick(string item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
        }
        else
        {
            SelectedItems.Add(item);
        }

        // Update the grid selection
        _selectedItemsCollection = FilteredRows.Where(r => SelectedItems.Contains(r.Item)).ToList();

        NavigateWithPageState();
        StateHasChanged();
    }

    private void RemoveItem(string item)
    {
        if (!SelectedItems.Remove(item)) return;

        // Update the grid selection
        _selectedItemsCollection = FilteredRows.Where(r => SelectedItems.Contains(r.Item)).ToList();

        NavigateWithPageState(replace: SelectedItems.Count == 0);
        StateHasChanged();
    }

    private void ClearItemFilter()
    {
        if (SelectedItems.Count == 0) return;
        SelectedItems.Clear();
        _selectedItemsCollection = new List<Row>();
        NavigateWithPageState(replace: true);
        StateHasChanged();
    }

    private async Task ClearAllFilters()
    {
        if (ItemsGridRef != null)
        {
            var state = ItemsGridRef.GetState();
            state.FilterDescriptors.Clear();
            state.SearchFilter = null;
            await ItemsGridRef.SetStateAsync(state);
        }
    }

    private async Task ClearPOLinesFilters()
    {
        if (POLinesGridRef != null)
        {
            var state = POLinesGridRef.GetState();
            state.FilterDescriptors.Clear();
            state.SearchFilter = null;
            await POLinesGridRef.SetStateAsync(state);
        }
    }

    private async Task ScrollToPOLinesAsync()
    {
        try { await JS.InvokeVoidAsync("blazorIoO.scrollIntoView", _oplinesSection); }
        catch { /* best effort */ }
    }

    private void OpenPODetails(string poNumber) => Console.WriteLine($"Open PO details: {poNumber}");

    private async Task Print()
    {
        var report = new ItemsOnOrderReport
        {
            Title = "Items on Order",
            Subtitle = null,
            Company = "IBN Dealer Suite",
            ReportDate = DateTime.Today,
            ShowTotals = true,
            Culture = CultureInfo.CurrentCulture,
            Rows = FilteredRows.Select(r => new ItemsOnOrderRow
            {
                Item = r.Item,
                Description = r.Description,
                OnOrder = r.OnOrderOpen,
                Open = r.OnOrderOpen,
                InTransit = r.InTransit,
                Alloc = r.Alloc,
                Bko = r.BKO,
                TotalOpenCost = r.TotalOpenCost,
                InTransitCost = r.InTransitCost,
                BackorderedCost = r.BackorderCost,
                UnacknowledgedCost = r.UnacknowledgedCost
            }).ToList()
        };

        var pdfBytes = await ReportService.GenerateAsync(report);
        var fileName = $"ItemsOnOrder_{DateTime.Now:yyyyMMdd_HHmm}.pdf";
        await JS.InvokeVoidAsync("files.save", fileName, Convert.ToBase64String(pdfBytes));
    }

    // ============================================================
    // Helpers
    // ============================================================
    private static List<Row> ApplyStatusFilter(List<Row> source, StatusKind status) =>
        status switch
        {
            StatusKind.All => source,
            StatusKind.Backorders => source.Where(r => r.BKO > 0).ToList(),
            StatusKind.InTransit => source.Where(r => r.InTransit > 0).ToList(),
            StatusKind.Unacknowledged => source.Where(r => r.IsUnacknowledged).ToList(),
            _ => source
        };

    private string HighlightIf(bool cond) => cond ? "hl" : "";

    // ============================================================
    // Data models
    // ============================================================
    private sealed class Row
    {
        public Row(string item, string desc, int onOrderOpen, int inTransit, int alloc, int bko, decimal unitCost)
        { Item = item; Description = desc; OnOrderOpen = onOrderOpen; InTransit = inTransit; Alloc = alloc; BKO = bko; UnitCost = unitCost; }
        public string Item { get; set; }
        public string Description { get; set; }
        public int OnOrderOpen { get; set; }
        public int InTransit { get; set; }
        public int Alloc { get; set; }
        public int BKO { get; set; }
        public decimal UnitCost { get; set; }
        public decimal TotalOpenCost => UnitCost * Math.Max(OnOrderOpen, 0);
        public decimal InTransitCost => UnitCost * InTransit;
        public decimal BackorderCost => UnitCost * BKO;
        public bool IsUnacknowledged => OnOrderOpen > 0 && InTransit == 0 && BKO == 0 && Alloc == 0;
        public decimal UnacknowledgedCost => IsUnacknowledged ? TotalOpenCost : 0m;
    }

    private sealed class OpenPOLine
    {
        public string Item { get; set; } = "";
        public string PONumber { get; set; } = "";
        public int Line { get; set; }
        public string SONumber { get; set; } = "";
        public string Vendor { get; set; } = "";
        public DateTime Date { get; set; }
        public int QtyOrdered { get; set; }
        public int Open { get; set; }
        public int InTransit { get; set; }
        public int Alloc { get; set; }
        public int BKO { get; set; }
        public decimal UnitCost { get; set; }
        public decimal TotalOpenCost => UnitCost * Math.Max(Open, 0);
        public int Rcv { get; set; }
        public string Status { get; set; } = "Open";
    }
}

<script>
    window.blazorIoO = window.blazorIoO || {};
    window.blazorIoO.scrollIntoView = function (el) {
        if (!el) return;
        el.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });
    };
</script>

<style>
    .badge {
        display: inline-block;
        padding: 0.25em 0.6em;
        font-size: 0.875em;
        font-weight: 600;
        line-height: 1;
        color: #fff;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-success {
        background-color: #28a745;
    }

    .badge-secondary {
        background-color: #6c757d;
    }

    .badge-danger {
        background-color: #dc3545;
    }

    .badge-info {
        background-color: #17a2b8;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #212529;
    }

    .text-danger {
        color: #dc3545 !important;
    }

    .text-warning {
        color: #ffc107 !important;
    }

    .link-button {
        background: none;
        border: none;
        color: #007bff;
        text-decoration: underline;
        cursor: pointer;
        padding: 0;
        font: inherit;
    }

        .link-button:hover {
            color: #0056b3;
        }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>
