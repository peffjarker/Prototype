@page "/po-transfer/purchase-orders"

@using Microsoft.AspNetCore.WebUtilities
@using Prototype.Components.Layout.Navigation.Sidebar
@using Utils

@inherits PageWithSidebarBase

@inject IJSRuntime JS

<div class="wrap">
    <header class="header">
        <h3 class="title">Purchase Order Detail</h3>
    </header>

    <section class="card rop-detail">
        <div class="rop-detail-grid">
            <!-- Left column -->
            <div class="col col-left">
                <div class="field">
                    <label>PO#:</label>
                    <input readonly value="@Model.PoNumber" />
                </div>

                <div class="field">
                    <label>Vendor:</label>
                    <input readonly value="@Model.VendorName" />
                </div>

                <div class="field">
                    <label>Ship To Name:</label>
                    <input readonly value="@Model.ShipToName" />
                </div>

                <div class="field">
                    <label>Attention/Address:</label>
                    <input readonly value="@Model.Attention" />
                </div>

                <div class="field">
                    <label>Address 1:</label>
                    <input readonly value="@Model.Address1" />
                </div>

                <div class="field">
                    <label>Address 2:</label>
                    <input readonly value="@Model.Address2" />
                </div>

                <div class="field-row">
                    <div class="field-col sm">
                        <label>City</label>
                        <input id="city" readonly value="@Model.City" />
                    </div>
                    <div class="field-col sm">
                        <label>State</label>
                        <input id="state" readonly value="@Model.State" />
                    </div>
                    <div class="field-col sm">
                        <label>Zip</label>
                        <input id="zip" readonly value="@Model.Zip" />
                    </div>
                </div>

                <div class="field">
                    <label>Special Instructions:</label>
                    <textarea readonly>@Model.SpecialInstructions</textarea>
                </div>

                <div class="field">
                    <a class="link" href="javascript:void(0)" @onclick="ViewActivities">View Activities</a>
                </div>
            </div>

            <!-- Right column -->
            <div class="col col-right">
                <div class="field">
                    <label>PO Date:</label>
                    <input readonly value="@Model.PoDate.ToString("MM/dd/yyyy")" />
                </div>

                <div class="field">
                    <label>Sales Order #:</label>
                    <input readonly value="@Model.SalesOrderNumber" />
                </div>

                <div class="field">
                    <label>PO Status:</label>
                    <input readonly value="@Model.PoStatus" />
                </div>

                <div class="field">
                    <label>Default Ship Method:</label>
                    <input readonly value="@Model.DefaultShipMethod" />
                </div>

                <div class="field">
                    <label>Premium Ship Method:</label>
                    <input readonly value="@Model.PremiumShipMethod" />
                </div>

                <div class="field check">
                    <label>Rally Pricing:</label>
                    <input type="checkbox" checked="@Model.RallyPricing" disabled />
                </div>

                <div class="field">
                    <label>No Paperwork:</label>
                    <input readonly value="@BoolText(Model.NoPaperwork)" />
                </div>

                <div class="field">
                    <label>Lift Gate Req:</label>
                    <input readonly value="@BoolText(Model.LiftGateRequired)" />
                </div>

                <div class="field">
                    <label>Total Cost:</label>
                    <input readonly value="@Model.TotalCost.ToString("C")" />
                </div>

                <div class="field">
                    <label>Open Cost:</label>
                    <input readonly value="@Model.OpenCost.ToString("C")" />
                </div>

                <div class="field">
                    <label>Comments:</label>
                    <input readonly value="@Model.Comments" />
                </div>

                <div class="field">
                    <label>Release BKO's:</label>
                    <input readonly value="@BoolText(Model.ReleaseBackorders)" />
                </div>

                <div class="field">
                    <label>BKO Unfilled:</label>
                    <input readonly value="@BoolText(Model.BackorderUnfilled)" />
                </div>
            </div>
        </div>

        <!-- Lines grid -->
        <div class="table-wrap">
            <table class="tbl rop-lines" role="grid" aria-label="PO Lines">
                <thead>
                    <tr>
                        <th class="num w-ord">#</th>
                        <th class="w-item">Line Item</th>
                        <th>Description</th>
                        <th>Comment</th>
                        <th class="num">Ord</th>
                        <th class="num">Rcv</th>
                        <th class="num">Open</th>
                        <th class="w-defcbx">DEF/CBX</th>
                        <th class="num">Transit</th>
                        <th class="num">SO Line</th>
                        <th class="num">Unit Cost</th>
                        <th class="num">Total Cost</th>
                        <th class="num">Rally Unit</th>
                        <th class="num">Rally Ext</th>
                        <th>Status</th>
                        <th class="num">Cancel</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (line, idx) in Model.Lines.Select((l, i) => (l, i + 1)))
                    {
                        <tr>
                            <td class="num">@idx</td>
                            <td>@line.Item</td>
                            <td>@line.Description</td>
                            <td>@line.Comment</td>
                            <td class="num">@line.Ordered</td>
                            <td class="num">@line.Received</td>
                            <td class="num">@line.Open</td>
                            <td>@line.DefCbx</td>
                            <td class="num">@line.Transit</td>
                            <td class="num">@line.SalesOrderLine</td>
                            <td class="num">@line.UnitCost.ToString("C")</td>
                            <td class="num">@line.TotalCost.ToString("C")</td>
                            <td class="num">@line.RallyUnit</td>
                            <td class="num">@line.RallyExt</td>
                            <td>@line.Status</td>
                            <td class="num">@line.CancelFlag</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Footer actions -->
        <footer class="rop-footer">
            <button class="btn" @onclick="PrintPo">Print</button>
            <button class="btn" @onclick="CreateNewPo">Create New</button>
            <button class="btn warn" @onclick="CancelSelectedLines">Cancel PO Line(s)</button>
            <button class="btn danger" @onclick="CancelPo">Cancel PO</button>
        </footer>
    </section>
</div>

@code {
    // ============================================================
    // 1) Page contract & URL bindings
    // ============================================================
    protected override string BasePath => "/po-transfer/purchase-orders";

    // URL-bound (singletons)
    private string Status = "Closed";      // default from your original page
    private string? SelectedPo;            // "PO-200996 - 07/29/2025"
    private string? DealerId;

    // Scalars -> URL map
    protected override IReadOnlyDictionary<string, string?> Scalars =>
       new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase)
       {
           ["dealer"] = DealerId,
           ["option"] = "Purchase Orders",
           ["status"] = Status,
           ["po"] = SelectedPo
       };

    protected override IReadOnlyCollection<string> MultiValues => Array.Empty<string>(); // none

    // Parse URL -> state, then load model
    protected override void ReadFromUrl()
    {
        var map = QueryStringMap.Read(Nav);

        // dealer
        DealerId = map.TryGetValue("dealer", out var d) && !string.IsNullOrWhiteSpace(d) ? d : null;

        // status
        Status = map.TryGetValue("status", out var s) && !string.IsNullOrWhiteSpace(s) ? s! : "Closed";

        var poParam = map.TryGetValue("po", out var p) ? p : null;

        if (AllPos.Count == 0)
            SeedPoList();

        var filtered = FilteredPos;

        if (!string.IsNullOrWhiteSpace(poParam) && filtered.Any(x => x.Display.Equals(poParam, StringComparison.OrdinalIgnoreCase)))
            SelectedPo = poParam;
        else
            SelectedPo = filtered.FirstOrDefault()?.Display;

        LoadPoDetail(SelectedPo);
    }

    // ============================================================
    // 2) Sidebar facets
    // ============================================================
    protected override IEnumerable<Facet> Facets()
    {
        // Option facet (cross-page) – wrap Hrefs with AppendPreserved
        yield return new Facet(
            Key: "option",
            Title: "Option",
            Options: () => new[]
            {
                new FacetOption("Items On Order",     "Items On Order",     Href: AppendPreserved("/po-transfer/items-on-order?status=All")),
                new FacetOption("Purchase Orders",    "Purchase Orders",    Href: AppendPreserved("/po-transfer/purchase-orders")),
                new FacetOption("Receipt of Product", "Receipt of Product", Href: AppendPreserved("/po-transfer/receipt-of-product?status=All"))
            }
        );

        yield return new Facet(
            Key: "status",
            Title: "Status",
            Options: () => new[]
            {
                new FacetOption("All","All",                                   Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("All")}")),
                new FacetOption("Pending","Pending",                           Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("Pending")}")),
                new FacetOption("In Process","In Process",                     Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("In Process")}")),
                new FacetOption("Issued – UnAcknowledged","Issued – UnAcknowledged", Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("Issued – UnAcknowledged")}")),
                new FacetOption("Open – Acknowledged","Open – Acknowledged",   Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("Open – Acknowledged")}")),
                new FacetOption("Closed","Closed",                             Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("Closed")}")),
                new FacetOption("Cancelled","Cancelled",                       Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString("Cancelled")}"))
            }
        );

        // PO facet – preserve current status and dealer
        yield return new Facet(
            Key: "po",
            Title: "PO",
            Options: () => FilteredPos.Select(p =>
                new FacetOption(
                    Text: p.Display,
                    Value: p.Display,
                    Href: AppendPreserved($"{BasePath}?status={Uri.EscapeDataString(Status)}&po={Uri.EscapeDataString(p.Display)}")
                ))
        );
    }

    protected override void OnSidebarClick(SidebarItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.Url))
            Nav.NavigateTo(AppendPreserved(item.Url));
    }

    // ============================================================
    // 3) Lifecycle
    // ============================================================
    protected override void OnInitialized()
    {
        SeedPoList();
        base.OnInitialized(); // wires Nav/Sidebar and builds sections
    }

    // ============================================================
    // 4) Page state & computed lists
    // ============================================================
    private sealed record PoSummary(string Number, DateTime Date, string Status)
    {
        public string Display => $"{Number} - {Date:MM/dd/yyyy}";
    }

    private List<PoSummary> AllPos = new();

    private List<PoSummary> FilteredPos =>
        (string.Equals(Status, "All", StringComparison.OrdinalIgnoreCase)
            ? AllPos
            : AllPos.Where(p => string.Equals(p.Status, Status, StringComparison.OrdinalIgnoreCase)))
        .OrderByDescending(p => p.Date)
        .ToList();

    // Page model (mock)
    private PurchaseOrder Model { get; set; } = new();

    // ============================================================
    // 5) Data seeding & loading
    // ============================================================
    private void SeedPoList()
    {
        AllPos = new()
        {
            new PoSummary("PO-200996",      new DateTime(2025, 07, 29), "Closed"),
            new PoSummary("PO-200995",      new DateTime(2025, 07, 24), "Open – Acknowledged"),
            new PoSummary("PO-200994",      new DateTime(2025, 07, 22), "Pending"),
            new PoSummary("PO-000010929",   new DateTime(2025, 07, 09), "Closed"),
            // add more with realistic statuses
        };
    }

    private void LoadPoDetail(string? poDisplay)
    {
        if (string.IsNullOrWhiteSpace(poDisplay))
        {
            Model = new();
            return;
        }

        var parts = poDisplay.Split(" - ");
        var poNum = parts.ElementAtOrDefault(0) ?? "PO-000000";
        var date = DateTime.TryParse(parts.ElementAtOrDefault(1), out var d) ? d : DateTime.Today;

        // Mock data – replace with real service call
        Model = new PurchaseOrder
        {
            PoNumber = poNum.Replace(" ", ""),
            PoDate = date,
            VendorName = "Cornwell Quality Tools",
            ShipToName = "TODARO, MEL J.",
            Attention = "1405 Hightower Dr",
            Address1 = "",
            Address2 = "",
            City = "Uniontown",
            State = "OH",
            Zip = "44685",
            SpecialInstructions = "",
            SalesOrderNumber = "0003285168",
            PoStatus = Status,
            DefaultShipMethod = "UPS",
            PremiumShipMethod = "—",
            RallyPricing = false,
            NoPaperwork = true,
            LiftGateRequired = false,
            Comments = "Purchase Order Added via CQT",
            ReleaseBackorders = false,
            BackorderUnfilled = false,
            Lines = new List<PurchaseOrderLine>
            {
                new()
                {
                    Item = "THCE5401",
                    Description = "Articulating Borescope, 5” 6mm Cam",
                    Comment = "Added - CQT",
                    Ordered = 1, Received = 1, Open = 0,
                    DefCbx = "None", Transit = 0, SalesOrderLine = 0,
                    UnitCost = 0m, TotalCost = 0m,
                    RallyUnit = 0, RallyExt = 0, Status = "Closed", CancelFlag = 0
                },
                new()
                {
                    Item = "PFNPSB8",
                    Description = "Sovereign True Wriss Bluetooth Earplugs",
                    Comment = "Added - CQT",
                    Ordered = 1, Received = 1, Open = 0,
                    DefCbx = "None", Transit = 0, SalesOrderLine = 0,
                    UnitCost = 0m, TotalCost = 0m,
                    RallyUnit = 0, RallyExt = 0, Status = "Closed", CancelFlag = 0
                }
            }
        };

        Model.TotalCost = Model.Lines.Sum(l => l.TotalCost);
        Model.OpenCost = Model.Lines.Where(l => l.Open > 0).Sum(l => l.TotalCost);
    }

    // ============================================================
    // 6) Actions (stubbed)
    // ============================================================
    private Task PrintPo() => JS.InvokeVoidAsync("console.log", "Print PO").AsTask();
    private Task CreateNewPo() => JS.InvokeVoidAsync("console.log", "Create New PO").AsTask();
    private Task CancelSelectedLines() => JS.InvokeVoidAsync("console.log", "Cancel Lines").AsTask();
    private Task CancelPo() => JS.InvokeVoidAsync("console.log", "Cancel PO").AsTask();
    private Task ViewActivities() => JS.InvokeVoidAsync("console.log", "View Activities").AsTask();

    // ============================================================
    // 7) Helpers
    // ============================================================
    private static string BoolText(bool v) => v ? "Yes" : "No";

    // ============================================================
    // 8) Simple models for this page
    // ============================================================
    private sealed class PurchaseOrder
    {
        public string PoNumber { get; set; } = "";
        public DateTime PoDate { get; set; } = DateTime.Today;
        public string VendorName { get; set; } = "";
        public string ShipToName { get; set; } = "";
        public string Attention { get; set; } = "";
        public string Address1 { get; set; } = "";
        public string Address2 { get; set; } = "";
        public string City { get; set; } = "";
        public string State { get; set; } = "";
        public string Zip { get; set; } = "";
        public string SpecialInstructions { get; set; } = "";

        public string SalesOrderNumber { get; set; } = "";
        public string PoStatus { get; set; } = "";
        public string DefaultShipMethod { get; set; } = "";
        public string PremiumShipMethod { get; set; } = "";
        public bool RallyPricing { get; set; }
        public bool NoPaperwork { get; set; }
        public bool LiftGateRequired { get; set; }
        public decimal TotalCost { get; set; }
        public decimal OpenCost { get; set; }
        public string Comments { get; set; } = "";
        public bool ReleaseBackorders { get; set; }
        public bool BackorderUnfilled { get; set; }

        public List<PurchaseOrderLine> Lines { get; set; } = new();
    }

    private sealed class PurchaseOrderLine
    {
        public string Item { get; set; } = "";
        public string Description { get; set; } = "";
        public string Comment { get; set; } = "";
        public int Ordered { get; set; }
        public int Received { get; set; }
        public int Open { get; set; }
        public string DefCbx { get; set; } = "None";
        public int Transit { get; set; }
        public int SalesOrderLine { get; set; }
        public decimal UnitCost { get; set; }
        public decimal TotalCost { get; set; }
        public int RallyUnit { get; set; }
        public int RallyExt { get; set; }
        public string Status { get; set; } = "";
        public int CancelFlag { get; set; }
    }
}
