@page "/po-transfer/receipt-of-product"

@using System.Globalization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.WebUtilities
@using Prototype.Components.Layout
@using Prototype.Components.Layout.Navigation
@using Prototype.Components.Layout.Navigation.Sidebar
@using Utils
@using Telerik.Blazor
@using Telerik.Blazor.Components

@inherits PageWithSidebarBase

@inject IJSRuntime JS

<div class="wrap">
    <header class="header">
        <h3 class="title">Receipt of Product</h3>

        <div class="rop-meta card table-wrap">
            <div class="field span-2">
                <label>ASN#:</label>
                <input readonly class="rop-asn" value="@SelectedAsnDisplay" />
            </div>

            <div class="field inline">
                <label>Print Needs Only:</label>
                <input type="checkbox" class="rop-pno" @bind="PrintNeedsOnly" />
            </div>

            <div class="field">
                <label>Total:</label>
                <input readonly class="rop-total" value="@SelectedAsnTotal.ToString("C")" />
            </div>

            <div class="field">
                <label>Received:</label>
                <input class="rop-received" type="number" step="0.01" inputmode="decimal"
                       @bind-value="ReceivedAmount" @bind-value:event="onchange" />
            </div>

            <div class="field">
                <label>Tracking#:</label>
                <input class="rop-tracking" @bind="TrackingNumber" />
            </div>

            <div class="field">
                <label>Carrier:</label>
                <select class="rop-carrier" @bind="SelectedCarrier">
                    @foreach (var c in Carriers)
                    {
                        <option value="@c">@c</option>
                    }
                </select>
            </div>

            <div class="field inline narrow align-end">
                <button class="btn"
                        @onclick="TrackPackageAsync"
                        disabled="@string.IsNullOrWhiteSpace(TrackingNumber)">
                    Track
                </button>
            </div>

            <div class="field">
                <label>Ship From:</label>
                <input readonly class="rop-shipfrom" value="@SelectedAsnShipFrom" />
            </div>

            <div class="field">
                <label>Ship Date:</label>
                <input readonly class="rop-shipdate" value="@SelectedAsnShipDate?.ToString("MM/dd/yyyy")" />
            </div>
        </div>
    </header>

    <section class="card rop-card">
        <header class="section-header panel" style="display: flex; align-items: center; padding: 1rem;">
            <h4 style="margin: 0;">Shipping Notifications</h4>
            <span class="badge" style="margin-left:auto;">Label Count: @LabelCountTotal</span>
        </header>

        <TelerikGrid Data="@CurrentLines"
                     SelectionMode="@GridSelectionMode.Multiple"
                     @bind-SelectedItems="@SelectedLines"
                     Pageable="true"
                     PageSize="20"
                     Sortable="true"
                     FilterMode="@GridFilterMode.FilterRow"
                     Resizable="true"
                     Reorderable="true"
                     Groupable="true"
                     ShowColumnMenu="true"
                     OnUpdate="@UpdateHandler"
                     EditMode="@GridEditMode.Incell">
            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                <GridSearchBox />
                <span style="margin-left: auto; font-weight: bold;">
                    Total Lines: @CurrentLines.Count | Selected: @SelectedLines.Count()
                </span>
            </GridToolBarTemplate>
            <GridExport>
                <GridExcelExport FileName="asn-lines" AllPages="true" />
                <GridCsvExport FileName="asn-lines" AllPages="true" />
            </GridExport>
            <GridColumns>
                <GridCheckboxColumn SelectAll="true" Width="60px" Locked="true" />
                <GridColumn Field="@nameof(AsnLine.Item)" Title="Item" Width="140px" Locked="true" />
                <GridColumn Field="@nameof(AsnLine.LabelCount)" Title="Label" Width="90px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.LabelCount);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.Description)" Title="Description" Width="300px" />
                <GridColumn Field="@nameof(AsnLine.UnitCost)" Title="Unit Cost" Width="120px" TextAlign="@ColumnTextAlign.Right" DisplayFormat="{0:C}">
                    <Template>
                        @{
                            var line = (AsnLine)context;
                            @line.UnitCost.ToString("C")
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.ExtCost)" Title="Ext. Cost" Width="130px" TextAlign="@ColumnTextAlign.Right">
                    <Template>
                        @{
                            var line = (AsnLine)context;
                            @line.ExtCost.ToString("C")
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.ExtCost);
                            <strong>@total.ToString("C")</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.PONumber)" Title="PO #" Width="140px" />
                <GridColumn Field="@nameof(AsnLine.POLine)" Title="PO Line" Width="100px" TextAlign="@ColumnTextAlign.Right" />
                <GridColumn Field="@nameof(AsnLine.NeedFor)" Title="Need For" Width="120px" />
                <GridColumn Field="@nameof(AsnLine.QtyOnHand)" Title="Qty On Hand" Width="130px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.QtyOnHand);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.TotalQtyNeeds)" Title="Total Qty Needs" Width="150px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.TotalQtyNeeds);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.QtyShip)" Title="Qty Ship" Width="110px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.QtyShip);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.PreviouslyReceived)" Title="Prev Rcv Qty" Width="140px" TextAlign="@ColumnTextAlign.Right">
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.PreviouslyReceived);
                            <strong>@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.ReceiveQty)" Title="Rcv Qty" Width="110px" TextAlign="@ColumnTextAlign.Right" Editable="true">
                    <Template>
                        @{
                            var line = (AsnLine)context;
                            <span style="@(line.ReceiveQty > 0 ? "font-weight: bold; color: #28a745;" : "")">
                                @line.ReceiveQty
                            </span>
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var total = CurrentLines.Sum(x => x.ReceiveQty);
                            <strong style="color: #28a745;">@total</strong>
                        }
                    </FooterTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(AsnLine.Status)" Title="Status" Width="120px">
                    <Template>
                        @{
                            var line = (AsnLine)context;
                            var statusClass = line.Status.ToLower() switch
                            {
                                "open" => "badge badge-success",
                                "closed" => "badge badge-secondary",
                                "partial" => "badge badge-warning",
                                _ => "badge badge-info"
                            };
                            <span class="@statusClass">@line.Status</span>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
            <GridSettings>
                <GridPagerSettings InputType="PagerInputType.Input"
                                   PageSizes="@(new List<int?> { 10, 20, 50, 100, null })" />
            </GridSettings>
        </TelerikGrid>

        <footer class="actions" style="margin-top: 1rem; padding: 1rem;">
            <button class="btn outline" @onclick="SelectAll">Select All (@CurrentLines.Count)</button>
            <button class="btn outline" @onclick="UnselectAll">Un-Select All</button>
            <button class="btn primary" @onclick="PrintPriceLabels" disabled="@(!CanPrintLabels)">
                Print Price Labels @(SelectedLines.Any() ? $"({SelectedLines.Count()})" : "")
            </button>
            <button class="btn success" @onclick="Receive" disabled="@(!CanReceive)">
                Receive @(TotalReceiveQty > 0 ? $"({TotalReceiveQty} items)" : "")
            </button>
        </footer>
    </section>
</div>

@code {
    // ===== BasePath for the sidebar builder =====
    protected override string BasePath => "/po-transfer/receipt-of-product";

    // ===== URL-bound state (singletons) =====
    public enum ReceiptStatus { All, Open, Closed }
    private ReceiptStatus Status = ReceiptStatus.Open;

    // Current selection
    private string? SelectedAsnId;

    // Data
    private List<AsnSummary> AsnList = new();
    private List<AsnSummary> FilteredAsns =>
        (Status == ReceiptStatus.All ? AsnList : AsnList.Where(a => a.Status == Status))
        .OrderByDescending(a => a.ShipDate)
        .ToList();

    // Derived header fields
    private string SelectedAsnDisplay => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.Display ?? "";
    private decimal SelectedAsnTotal => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.Total ?? 0m;
    private string SelectedAsnShipFrom => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.ShipFrom ?? "";
    private DateTime? SelectedAsnShipDate => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.ShipDate;

    // Top-row local/editable
    private bool PrintNeedsOnly;
    private decimal ReceivedAmount;
    private string TrackingNumber = "";
    private string SelectedCarrier = "UPS";
    private readonly string[] Carriers = new[] { "UPS", "USPS", "FedEx", "DHL", "OnTrac", "Other" };

    // Lines and selection
    private List<AsnLine> CurrentLines = new();
    private IEnumerable<AsnLine> SelectedLines { get; set; } = new List<AsnLine>();

    private int LabelCountTotal => CurrentLines.Sum(x => x.LabelCount);
    private int TotalReceiveQty => CurrentLines.Sum(x => x.ReceiveQty);
    private bool CanPrintLabels => PrintNeedsOnly && SelectedLines.Any();
    private bool CanReceive => TotalReceiveQty > 0;

    // ====== PageWithSidebarBase contract ======
    protected override IReadOnlyDictionary<string, string?> Scalars =>
        new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase)
        {
            ["dealer"] = DealerId,
            ["option"] = "Receipt of Product",
            ["status"] = Status.ToString(),
            ["asn"] = SelectedAsnId
        };

    protected override IReadOnlyCollection<string> MultiValues => Array.Empty<string>();

    // URL-bound state
    private string? DealerId;

    protected override void ReadFromUrl()
    {
        var map = QueryStringMap.Read(Nav);

        // dealer
        DealerId = map.TryGetValue("dealer", out var d) && !string.IsNullOrWhiteSpace(d) ? d : null;

        // status
        Status = (map.TryGetValue("status", out var s) && Enum.TryParse<ReceiptStatus>(s, true, out var parsed))
            ? parsed : ReceiptStatus.Open;

        // asn
        SelectedAsnId = map.TryGetValue("asn", out var a) && !string.IsNullOrWhiteSpace(a) ? a : null;

        // Keep selection valid against current filter
        var list = FilteredAsns;
        if (SelectedAsnId is null || !list.Any(x => x.AsnId.Equals(SelectedAsnId, StringComparison.OrdinalIgnoreCase)))
            SelectedAsnId = list.FirstOrDefault()?.AsnId;

        LoadHeaderFor(SelectedAsnId);
        LoadLinesFor(SelectedAsnId);
    }

    // ============================================================
    // Sidebar facets
    // ============================================================

    // Enable franchise selector in sidebar
    protected override bool ShowFranchiseSelector => false;

    protected override IEnumerable<Facet> Facets()
    {
        yield return new Facet(
            Key: "option",
            Title: "Option",
            Options: () => new[]
            {
                new FacetOption("Items On Order",    "Items On Order",    Href: AppendPreserved("/po-transfer/items-on-order?status=All")),
                new FacetOption("Purchase Orders",   "Purchase Orders",   Href: AppendPreserved("/po-transfer/purchase-orders")),
                new FacetOption("Receipt of Product","Receipt of Product",Href: AppendPreserved("/po-transfer/receipt-of-product?status=All"))
            }
        );

        yield return new Facet(
            Key: "status",
            Title: "Status",
            Options: () => new[]
            {
                new FacetOption("All","All",       Href: AppendPreserved($"{BasePath}?status=All")),
                new FacetOption("Open","Open",     Href: AppendPreserved($"{BasePath}?status=Open")),
                new FacetOption("Closed","Closed", Href: AppendPreserved($"{BasePath}?status=Closed"))
            }
        );

        yield return new Facet(
            Key: "asn",
            Title: "ASN",
            Options: () => FilteredAsns.Select(a =>
                new FacetOption(
                    $"{a.AsnId} - {a.ShipDate:MM/dd/yyyy}",
                    a.AsnId,
                    Href: AppendPreserved($"{BasePath}?status={Status}&asn={Uri.EscapeDataString(a.AsnId)}")
                ))
        );
    }

    protected override void OnSidebarClick(SidebarItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.Url))
            Nav.NavigateTo(AppendPreserved(item.Url));
    }

    // ===== Lifecycle =====
    protected override void OnInitialized()
    {
        // Seed demo data (replace with real data source)
        AsnList = DemoAsns().OrderByDescending(a => a.ShipDate).ToList();

        // Important: base wires Nav/Sidebar and builds initial sections from current URL
        base.OnInitialized();
    }

    // ===== Data loaders =====
    private void LoadHeaderFor(string? asnId)
    {
        // defaults
        PrintNeedsOnly = false;
        ReceivedAmount = 0m;
        TrackingNumber = "";
        SelectedCarrier = "UPS";

        var a = AsnList.FirstOrDefault(x => x.AsnId == asnId);
        if (a is null) return;

        PrintNeedsOnly = a.PrintNeedsOnly;
        ReceivedAmount = a.ReceivedAmount;
        TrackingNumber = a.TrackingNumber ?? "";
        SelectedCarrier = string.IsNullOrWhiteSpace(a.Carrier) ? "UPS" : a.Carrier;
    }

    private void LoadLinesFor(string? asnId)
    {
        CurrentLines.Clear();
        SelectedLines = new List<AsnLine>();

        if (string.IsNullOrWhiteSpace(asnId)) return;

        // DEMO lines - expanded with more data
        if (asnId == "0044501566")
        {
            CurrentLines.AddRange(new[]
            {
                new AsnLine
                {
                    Item = "MWE289120",
                    LabelCount = 1,
                    Description = "M18 & M12 Wireless Spkr",
                    UnitCost = 185.46m,
                    ExtCost = 185.46m,
                    PONumber = "PO-200996",
                    POLine = 7,
                    NeedFor = "Truck",
                    QtyOnHand = 0,
                    TotalQtyNeeds = 0,
                    QtyShip = 1,
                    PreviouslyReceived = 0,
                    ReceiveQty = 1,
                    Status = "Open"
                },
                new AsnLine
                {
                    Item = "SB4820",
                    LabelCount = 2,
                    Description = "20pc 1/2\" Drive SAE Socket Set",
                    UnitCost = 89.99m,
                    ExtCost = 179.98m,
                    PONumber = "PO-200996",
                    POLine = 8,
                    NeedFor = "Stock",
                    QtyOnHand = 2,
                    TotalQtyNeeds = 3,
                    QtyShip = 2,
                    PreviouslyReceived = 0,
                    ReceiveQty = 2,
                    Status = "Open"
                }
            });
        }
        else if (asnId == "0044453050")
        {
            CurrentLines.Add(new AsnLine
            {
                Item = "WT3350",
                LabelCount = 1,
                Description = "Adjustable Wrench 12\"",
                UnitCost = 92.10m,
                ExtCost = 92.10m,
                PONumber = "PO-200994",
                POLine = 3,
                NeedFor = "Customer",
                QtyOnHand = 1,
                TotalQtyNeeds = 1,
                QtyShip = 1,
                PreviouslyReceived = 0,
                ReceiveQty = 0,
                Status = "Open"
            });
        }
    }

    // ===== Grid event handlers =====
    private async Task UpdateHandler(GridCommandEventArgs args)
    {
        var line = (AsnLine)args.Item;

        // Find and update the line in the list
        var existingLine = CurrentLines.FirstOrDefault(l => l.Item == line.Item);
        if (existingLine != null)
        {
            existingLine.ReceiveQty = line.ReceiveQty;

            // Recalculate received amount
            ReceivedAmount = CurrentLines.Sum(l => l.ReceiveQty * l.UnitCost);
        }

        await InvokeAsync(StateHasChanged);
    }

    // ===== Actions =====
    private void SelectAll()
    {
        SelectedLines = CurrentLines.ToList();
        StateHasChanged();
    }

    private void UnselectAll()
    {
        SelectedLines = new List<AsnLine>();
        StateHasChanged();
    }

    private async Task PrintPriceLabels()
    {
        if (!CanPrintLabels) return;

        var items = string.Join(", ", SelectedLines.Select(l => l.Item));
        await JS.InvokeVoidAsync("console.log", $"Printing price labels for: {items}");

        // TODO: Implement actual label printing
    }

    private async Task Receive()
    {
        if (!CanReceive) return;

        var itemsToReceive = CurrentLines.Where(l => l.ReceiveQty > 0).ToList();
        var summary = string.Join(", ", itemsToReceive.Select(l => $"{l.Item} ({l.ReceiveQty})"));

        await JS.InvokeVoidAsync("console.log", $"Receiving items: {summary}");
        await JS.InvokeVoidAsync("console.log", $"Total amount: {ReceivedAmount:C}");

        // TODO: Implement actual receiving logic
        // After successful receive:
        // - Update line statuses
        // - Clear receive quantities
        // - Reload data
    }

    private async Task TrackPackageAsync()
    {
        var url = BuildTrackingUrl(SelectedCarrier, TrackingNumber);
        if (string.IsNullOrWhiteSpace(url)) return;

        await JS.InvokeVoidAsync("open", url, "_blank", "noopener,noreferrer");
    }

    private static string BuildTrackingUrl(string carrier, string tracking)
    {
        if (string.IsNullOrWhiteSpace(tracking)) return "";
        var enc = Uri.EscapeDataString(tracking.Trim());
        return carrier?.ToUpperInvariant() switch
        {
            "UPS" => $"https://www.ups.com/track?loc=en_US&tracknum={enc}",
            "USPS" => $"https://tools.usps.com/go/TrackConfirmAction?tLabels={enc}",
            "FEDEX" => $"https://www.fedex.com/fedextrack/?trknbr={enc}",
            "DHL" => $"https://www.dhl.com/global-en/home/tracking.html?tracking-id={enc}",
            "ONTRAC" => $"https://www.ontrac.com/trackingres.asp?tracking_number={enc}",
            _ => $"https://www.google.com/search?q={Uri.EscapeDataString($"{carrier} {tracking}")}"
        };
    }

    // ===== Models =====
    private sealed record AsnSummary(
        string AsnId,
        DateTime ShipDate,
        string ShipFrom,
        decimal Total,
        ReceiptStatus Status,
        bool PrintNeedsOnly = false,
        decimal ReceivedAmount = 0m,
        string? TrackingNumber = null,
        string Carrier = "UPS")
    {
        public string Display => $"{AsnId} - {ShipDate:MM/dd/yyyy}";
    }

    private sealed class AsnLine
    {
        public string Item { get; set; } = "";
        public int LabelCount { get; set; }
        public string Description { get; set; } = "";
        public decimal UnitCost { get; set; }
        public decimal ExtCost { get; set; }
        public string PONumber { get; set; } = "";
        public int POLine { get; set; }
        public string NeedFor { get; set; } = "";
        public int QtyOnHand { get; set; }
        public int TotalQtyNeeds { get; set; }
        public int QtyShip { get; set; }
        public int PreviouslyReceived { get; set; }
        public int ReceiveQty { get; set; }
        public string Status { get; set; } = "Open";
    }

    // ===== Demo data =====
    private static IEnumerable<AsnSummary> DemoAsns()
    {
        yield return new AsnSummary("0044501566", new DateTime(2025, 8, 22), "1DC", 185.46m, ReceiptStatus.Open,
                                    PrintNeedsOnly: false, ReceivedAmount: 0m,
                                    TrackingNumber: "1Z4824G30934141682", Carrier: "UPS");
        yield return new AsnSummary("0044453050", new DateTime(2025, 8, 15), "1DC", 92.10m, ReceiptStatus.Open);
        yield return new AsnSummary("0044249540", new DateTime(2025, 8, 13), "1DC", 410.00m, ReceiptStatus.Closed);
        yield return new AsnSummary("0044341783", new DateTime(2025, 8, 4), "1DC", 76.25m, ReceiptStatus.Closed);
        yield return new AsnSummary("0044350891", new DateTime(2025, 7, 30), "1DC", 129.99m, ReceiptStatus.Open);
    }
}

<style>
    .badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.875em;
        font-weight: 600;
        line-height: 1;
        color: #fff;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-success {
        background-color: #28a745;
    }

    .badge-secondary {
        background-color: #6c757d;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-info {
        background-color: #17a2b8;
    }

    .btn.outline {
        background-color: transparent;
        border: 1px solid #6c757d;
        color: #6c757d;
    }

        .btn.outline:hover {
            background-color: #6c757d;
            color: #fff;
        }

    .btn.primary {
        background-color: #007bff;
        color: #fff;
        border: none;
    }

        .btn.primary:hover {
            background-color: #0056b3;
        }

    .btn.success {
        background-color: #28a745;
        color: #fff;
        border: none;
    }

        .btn.success:hover {
            background-color: #1e7e34;
        }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>