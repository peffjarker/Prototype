@page "/po-transfer/receipt-of-product"

@using System.Globalization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.WebUtilities
@using Prototype.Components.Layout
@using Prototype.Components.Layout.Navigation
@using Prototype.Components.Layout.Navigation.Sidebar

@inherits PageWithSidebarBase

@inject IJSRuntime JS

<div class="rop-wrap">
    <header class="rop-header">
        <h3 class="rop-title">Receipt of Product</h3>

        <div class="panel rop-meta">
            <div class="field span-2">
                <label>ASN#:</label>
                <input readonly class="rop-asn" value="@SelectedAsnDisplay" />
            </div>

            <div class="field inline">
                <label>Print Needs Only:</label>
                <input type="checkbox" class="rop-pno" @bind="PrintNeedsOnly" />
            </div>

            <div class="field">
                <label>Total:</label>
                <input readonly class="rop-total" value="@SelectedAsnTotal.ToString("C")" />
            </div>

            <div class="field">
                <label>Received:</label>
                <input class="rop-received" type="number" step="0.01" inputmode="decimal"
                       @bind-value="ReceivedAmount" @bind-value:event="onchange" />
            </div>

            <div class="field">
                <label>Tracking#:</label>
                <input class="rop-tracking" @bind="TrackingNumber" />
            </div>

            <div class="field">
                <label>Carrier:</label>
                <select class="rop-carrier" @bind="SelectedCarrier">
                    @foreach (var c in Carriers)
                    {
                        <option value="@c">@c</option>
                    }
                </select>
            </div>

            <div class="field inline narrow align-end">
                <button class="btn"
                        @onclick="TrackPackageAsync"
                        disabled="@string.IsNullOrWhiteSpace(TrackingNumber)">
                    Track
                </button>
            </div>

            <div class="field">
                <label>Ship From:</label>
                <input readonly class="rop-shipfrom" value="@SelectedAsnShipFrom" />
            </div>

            <div class="field">
                <label>Ship Date:</label>
                <input readonly class="rop-shipdate" value="@SelectedAsnShipDate?.ToString("MM/dd/yyyy")" />
            </div>
        </div>
    </header>

    <section class="card rop-card">
        <header class="section-header panel">
            <h4>Shipping Notifications</h4>
            <span class="badge" style="margin-left:auto;">Label Count: @LabelCountTotal</span>
        </header>

        <div class="table-wrap">
            <table class="tbl tbl-lines" role="grid" aria-label="ASN Lines">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th class="w-label">Label</th>
                        <th>Description</th>
                        <th class="num">Unit Cost</th>
                        <th class="num">Ext. Cost</th>
                        <th class="w-po">PO #</th>
                        <th class="w-ln">PO Line</th>
                        <th>Need For</th>
                        <th class="num">Qty On Hand</th>
                        <th class="num">Total Qty Needs</th>
                        <th class="num">Qty Ship</th>
                        <th class="num">Prev Rcv Qty</th>
                        <th class="num">Rcv Qty</th>
                        <th class="w-status">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (CurrentLines.Count == 0)
                    {
                        <tr><td colspan="14" class="muted">No lines for the selected ASN.</td></tr>
                    }
                    else
                    {
                        @foreach (var l in CurrentLines)
                        {
                            <tr>
                                <td>@l.Item</td>
                                <td class="num">@l.LabelCount</td>
                                <td>@l.Description</td>
                                <td class="num">@l.UnitCost.ToString("C")</td>
                                <td class="num">@l.ExtCost.ToString("C")</td>
                                <td class="w-po">@l.PONumber</td>
                                <td class="num">@l.POLine</td>
                                <td>@l.NeedFor</td>
                                <td class="num">@l.QtyOnHand</td>
                                <td class="num">@l.TotalQtyNeeds</td>
                                <td class="num">@l.QtyShip</td>
                                <td class="num">@l.PreviouslyReceived</td>
                                <td class="num">@l.ReceiveQty</td>
                                <td>@l.Status</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <footer class="actions">
            <button class="btn outline" @onclick="SelectAll">Select All</button>
            <button class="btn outline" @onclick="UnselectAll">Un-Select All</button>
            <button class="btn primary" @onclick="PrintPriceLabels" disabled="@(!PrintNeedsOnly)">Print Price Labels</button>
            <button class="btn success" @onclick="Receive">Receive</button>
        </footer>
    </section>
</div>

@code {
    // ===== BasePath for the sidebar builder =====
    protected override string BasePath => "/po-transfer/receipt-of-product";

    // ===== URL-bound state (singletons) =====
    public enum ReceiptStatus { All, Open, Closed }
    private ReceiptStatus Status = ReceiptStatus.Open;

    // Current selection
    private string? SelectedAsnId;

    // Data
    private List<AsnSummary> AsnList = new();
    private List<AsnSummary> FilteredAsns =>
        (Status == ReceiptStatus.All ? AsnList : AsnList.Where(a => a.Status == Status))
        .OrderByDescending(a => a.ShipDate)
        .ToList();

    // Derived header fields
    private string SelectedAsnDisplay => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.Display ?? "";
    private decimal SelectedAsnTotal => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.Total ?? 0m;
    private string SelectedAsnShipFrom => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.ShipFrom ?? "";
    private DateTime? SelectedAsnShipDate => FilteredAsns.FirstOrDefault(a => a.AsnId == SelectedAsnId)?.ShipDate;

    // Top-row local/editable
    private bool PrintNeedsOnly;
    private decimal ReceivedAmount;
    private string TrackingNumber = "";
    private string SelectedCarrier = "UPS";
    private readonly string[] Carriers = new[] { "UPS", "USPS", "FedEx", "DHL", "OnTrac", "Other" };

    // Lines
    private List<AsnLine> CurrentLines = new();
    private int LabelCountTotal => CurrentLines.Sum(x => x.LabelCount);

    // ====== PageWithSidebarBase contract ======
    protected override IReadOnlyDictionary<string, string?> Scalars =>
        new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase)
        {
            ["option"] = "Receipt of Product",
            ["status"] = Status.ToString(),
            ["asn"] = SelectedAsnId
        };

    protected override IReadOnlyCollection<string> MultiValues => Array.Empty<string>(); // none on this page

    protected override void ReadFromUrl()
    {
        var map = QueryStringMap.Read(Nav);

        Status = (map.TryGetValue("status", out var s) && Enum.TryParse<ReceiptStatus>(s, true, out var parsed))
            ? parsed : ReceiptStatus.Open;

        SelectedAsnId = map.TryGetValue("asn", out var a) && !string.IsNullOrWhiteSpace(a) ? a : null;

        // Keep selection valid against current filter
        var list = FilteredAsns;
        if (SelectedAsnId is null || !list.Any(x => x.AsnId.Equals(SelectedAsnId, StringComparison.OrdinalIgnoreCase)))
            SelectedAsnId = list.FirstOrDefault()?.AsnId;

        // Load header + lines whenever URL changes
        LoadHeaderFor(SelectedAsnId);
        LoadLinesFor(SelectedAsnId);
    }

    protected override IEnumerable<Facet> Facets()
    {
        // Option facet: use absolute Href so we change the PATH, not just query params
        yield return new Facet(
            Key: "option",
            Title: "Option",
            Options: () => new[]
            {
            new FacetOption("Items On Order",   "Items On Order", Href: "/po-transfer/items-on-order?status=All"),
            new FacetOption("Purchase Orders",  "Purchase Orders", Href: "/po-transfer/purchase-orders"),
            new FacetOption("Receipt of Product","Receipt of Product", Href: "/po-transfer/receipt-of-product?status=All")
            }
        );

        yield return new Facet(
            Key: "status",
            Title: "Status",
            Options: () => new[]
            {
            new FacetOption("All","All"),
            new FacetOption("Open","Open"),
            new FacetOption("Closed","Closed")
            }
        );

        yield return new Facet(
            Key: "asn",
            Title: "ASN",
            Options: () => FilteredAsns.Select(a =>
                new FacetOption($"{a.AsnId} - {a.ShipDate:MM/dd/yyyy}", a.AsnId,
                    Href: $"/po-transfer/receipt-of-product?status={Status}&asn={Uri.EscapeDataString(a.AsnId)}"))
        );
    }

    protected override void OnSidebarClick(SidebarItem item)
    {
        // The FacetSections builder encoded the full URL; we can just navigate.
        if (!string.IsNullOrWhiteSpace(item.Url))
            Nav.NavigateTo(item.Url);
    }

    // ===== Lifecycle =====
    protected override void OnInitialized()
    {
        // Seed demo data (replace with real data source)
        AsnList = DemoAsns().OrderByDescending(a => a.ShipDate).ToList();

        // Important: base wires Nav/Sidebar and builds initial sections from current URL
        base.OnInitialized();
    }

    // ===== Data loaders =====
    private void LoadHeaderFor(string? asnId)
    {
        // defaults
        PrintNeedsOnly = false;
        ReceivedAmount = 0m;
        TrackingNumber = "";
        SelectedCarrier = "UPS";

        var a = AsnList.FirstOrDefault(x => x.AsnId == asnId);
        if (a is null) return;

        PrintNeedsOnly = a.PrintNeedsOnly;
        ReceivedAmount = a.ReceivedAmount;
        TrackingNumber = a.TrackingNumber ?? "";
        SelectedCarrier = string.IsNullOrWhiteSpace(a.Carrier) ? "UPS" : a.Carrier;
    }

    private void LoadLinesFor(string? asnId)
    {
        CurrentLines.Clear();
        if (string.IsNullOrWhiteSpace(asnId)) return;

        // DEMO lines
        if (asnId == "0044501566")
        {
            CurrentLines.Add(new AsnLine
            {
                Item = "MWE289120",
                LabelCount = 1,
                Description = "M18 & M12 Wireless Spkr",
                UnitCost = 185.46m,
                ExtCost = 185.46m,
                PONumber = "PO-200996",
                POLine = 7,
                NeedFor = "Truck",
                QtyOnHand = 0,
                TotalQtyNeeds = 0,
                QtyShip = 1,
                PreviouslyReceived = 0,
                ReceiveQty = 1,
                Status = "Open"
            });
        }
    }

    // ===== Actions =====
    private Task SelectAll() => Task.CompletedTask;
    private Task UnselectAll() => Task.CompletedTask;
    private Task PrintPriceLabels() => Task.CompletedTask;
    private Task Receive() => Task.CompletedTask;

    private async Task TrackPackageAsync()
    {
        var url = BuildTrackingUrl(SelectedCarrier, TrackingNumber);
        if (string.IsNullOrWhiteSpace(url)) return;

        await JS.InvokeVoidAsync("open", url, "_blank", "noopener,noreferrer");
    }

    private static string BuildTrackingUrl(string carrier, string tracking)
    {
        if (string.IsNullOrWhiteSpace(tracking)) return "";
        var enc = Uri.EscapeDataString(tracking.Trim());
        return carrier?.ToUpperInvariant() switch
        {
            "UPS" => $"https://www.ups.com/track?loc=en_US&tracknum={enc}",
            "USPS" => $"https://tools.usps.com/go/TrackConfirmAction?tLabels={enc}",
            "FEDEX" => $"https://www.fedex.com/fedextrack/?trknbr={enc}",
            "DHL" => $"https://www.dhl.com/global-en/home/tracking.html?tracking-id={enc}",
            "ONTRAC" => $"https://www.ontrac.com/trackingres.asp?tracking_number={enc}",
            _ => $"https://www.google.com/search?q={Uri.EscapeDataString($"{carrier} {tracking}")}"
        };
    }

    // ===== Models =====
    private sealed record AsnSummary(
        string AsnId,
        DateTime ShipDate,
        string ShipFrom,
        decimal Total,
        ReceiptStatus Status,
        bool PrintNeedsOnly = false,
        decimal ReceivedAmount = 0m,
        string? TrackingNumber = null,
        string Carrier = "UPS")
    {
        public string Display => $"{AsnId} - {ShipDate:MM/dd/yyyy}";
    }

    private sealed class AsnLine
    {
        public string Item { get; set; } = "";
        public int LabelCount { get; set; }
        public string Description { get; set; } = "";
        public decimal UnitCost { get; set; }
        public decimal ExtCost { get; set; }
        public string PONumber { get; set; } = "";
        public int POLine { get; set; }
        public string NeedFor { get; set; } = "";
        public int QtyOnHand { get; set; }
        public int TotalQtyNeeds { get; set; }
        public int QtyShip { get; set; }
        public int PreviouslyReceived { get; set; }
        public int ReceiveQty { get; set; }
        public string Status { get; set; } = "Open";
    }

    // ===== Demo data =====
    private static IEnumerable<AsnSummary> DemoAsns()
    {
        yield return new AsnSummary("0044501566", new DateTime(2025, 8, 22), "1DC", 185.46m, ReceiptStatus.Open,
                                    PrintNeedsOnly: false, ReceivedAmount: 0m,
                                    TrackingNumber: "1Z4824G30934141682", Carrier: "UPS");
        yield return new AsnSummary("0044453050", new DateTime(2025, 8, 15), "1DC", 92.10m, ReceiptStatus.Open);
        yield return new AsnSummary("0044249540", new DateTime(2025, 8, 13), "1DC", 410.00m, ReceiptStatus.Closed);
        yield return new AsnSummary("0044341783", new DateTime(2025, 8, 4), "1DC", 76.25m, ReceiptStatus.Closed);
        yield return new AsnSummary("0044350891", new DateTime(2025, 7, 30), "1DC", 129.99m, ReceiptStatus.Open);
    }
}
